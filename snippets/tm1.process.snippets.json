{
    "AddClient": { "prefix":  "AddClient","body":  "AddClient( ${1:sClientName} )", "description":  "AddClient creates a new client on the server. Changes applied through the AddClient functions do not take effect until the Metadata procedure in a process is completed. This function" },
    "AddCubeDependency": { "prefix":  "AddCubeDependency","body":  "AddCubeDependency( ${1:sCubeName}, ${2:sDependentCubeName} )", "description":  "AddCubeDependency lets you predefine cube inter-dependencies to avoid lock contention problems during normal system use." },
    "AddGroup": { "prefix":  "AddGroup","body":  "AddGroup( ${1:sGroupName} )", "description":  "AddGroup creates a new user group on the server. Changes applied through the AddGroup function do not take effect until the Metadata procedure in a process is completed. This function" },
    "AddInfoCubeRestriction": { "prefix":  "AddInfoCubeRestriction","body":  "AddInfoCubeRestriction( ${1:sCharactName}, ${2:sSign}, ${3:sCompOperator}, ${4:sLowValue}, ${5:sHighValue} )", "description":  "AddInfoCubeRestriction filters InfoCube data as it is pulled into TM1. Use this function to restrict the values that are imported for a specified characteristic. This function must be placed in the Prolog. The function can be called multiple times to filter more than one characteristic in a single process." },
    "ASCIIDelete": { "prefix":  "ASCIIDelete","body":  "ASCIIDelete( ${1:sFileName} )", "description":  "ASCIIDelete deletes an ASCII file." },
    "ASCIIOutput": { "prefix":  "ASCIIOutput","body":  "ASCIIOutput( ${1:sFileName}, ${2:sString1}, ${3:[sString2]}, ${4:[...]} )", "description":  "ASCIIOutput writes a comma-delimited record to an ASCII file." },
    "AssignClientPassword": { "prefix":  "AssignClientPassword","body":  "AssignClientPassword( ${1:sClientName}, ${2:sPassword} )", "description":  "AssignClientPassword assigns a password to an existing client on a server. AssignClientPassword returns 1 if the password assignment is successful and returns 0 if the assignment fails." },
    "AssignClientToGroup": { "prefix":  "AssignClientToGroup","body":  "AssignClientToGroup( ${1:sClientName}, ${2:sGroupName} )", "description":  "AssignClientToGroup assigns an existing client on a server to an existing user group. This function assigns an existing client on a server to an existing user group." },
    "AssociateCAMIDToGroup": { "prefix":  "AssociateCAMIDToGroup","body":  "AssociateCAMIDToGroup( ${1:sGroupName}, ${2:sCAMID}, ${3:sCAMIDDisplayValue} )", "description":  "AssociateCAMIDToGroup creates an association between a TM1 user group and a CAMID." },
    "AttrDelete": { "prefix":  "AttrDelete","body":  "AttrDelete( ${1:sDimName}, ${2:sAttrName} )", "description":  "AttrDelete deletes an element attribute from the TM1 database." },
    "AttrInsert": { "prefix":  "AttrInsert","body":  "AttrInsert( ${1:sDimName}, ${2:sPrevAttr}, ${3:sAttrName}, ${4:sType} )", "description":  "AttrInsert creates a new element attribute for a dimension. The function can create a string" },
    "ATTRNL": { "prefix":  "ATTRNL","body":  "AttrNL( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ATTRNL returns a numeric attribute for a specified element of a dimension." },
    "AttrPutN": { "prefix":  "AttrPutN","body":  "AttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sElemID}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "AttrPutN assigns a value to a numeric element attribute." },
    "AttrPutS": { "prefix":  "AttrPutS","body":  "AttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sElemID}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "AttrPutS assigns a value to a string element attribute." },
    "ATTRSL": { "prefix":  "ATTRSL","body":  "AttrSL( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "AttrSL returns a string attribute for a specified element of a dimension." },
    "BatchUpdateFinish": { "prefix":  "BatchUpdateFinish","body":  "BatchUpdateFinish( ${1:bSaveChanges} )", "description":  "BatchUpdateFinish instructs the server to exit batch update mode." },
    "BatchUpdateFinishWait": { "prefix":  "BatchUpdateFinishWait","body":  "BatchUpdateFinishWait( ${1:bSaveChanges} )", "description":  "BatchUpdateFinishWait is identical to BatchUpdateFinish except the process waits until the lock becomes available and then commits changes. If a process calls BatchUpdateFinishWait but is unable to secure a cube write lock to commit changes" },
    "BatchUpdateStart": { "prefix":  "BatchUpdateStart","body":  "BatchUpdateStart()", "description":  "BatchUpdateStart enables batch updates." },
    "CellGetN": { "prefix":  "CellGetN","body":  "CellGetN( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "CellGetN retrieves a value from a numeric cube cell." },
    "CellGetS": { "prefix":  "CellGetS","body":  "CellGetS( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "CellGetS retrieves a value from a string cube cell." },
    "CellIncrementN": { "prefix":  "CellIncrementN","body":  "CellIncrementN( ${1:nIncrementValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:[...]} )", "description":  "CellIncrementN increments an existing numeric cell value by a specified value." },
    "CellIsUpdateable": { "prefix":  "CellIsUpdateable","body":  "CellIsUpdateable( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "CellIsUpdateable determines whether a cube cell can be written to. The function returns 1 if the cell can be written to" },
    "CellPutN": { "prefix":  "CellPutN","body":  "CellPutN( ${1:nPutValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:[...]} )", "description":  "CellPutN sends a numeric value to a cube cell." },
    "CellPutProportionalSpread": { "prefix":  "CellPutProportionalSpread","body":  "CellPutProportionalSpread( ${1:nSpreadValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:[...]} )", "description":  "CellPutProportionalSpread distributes a specified value to the leaves of a consolidation proportional to existing cell values. CellPutProportionalSpread replaces existing cell values; it cannot be used to add to or subtract from existing cell values." },
    "CellPutS": { "prefix":  "CellPutS","body":  "CellPutS( ${1:sPutValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:[...]} )", "description":  "CellPutS sends a string value to a cube cell." },
    "CellSecurityCubeCreate": { "prefix":  "CellSecurityCubeCreate","body":  "CellSecurityCubeCreate( ${1:sCubeName}, ${2:sDimensionMap} )", "description":  "CellSecurityCubeCreate creates a security cube from an existing cube using a reduced set of dimensions. This function" },
    "CellSecurityCubeDestroy": { "prefix":  "CellSecurityCubeDestroy","body":  "CellSecurityCubeDestroy( ${1:sCubeName}, ${2:sDimensionMap} )", "description":  "CellSecurityCubeDestroy destroys a security cube that was created from an existing cube. This function" },
    "ChoreAttrDelete": { "prefix":  "ChoreAttrDelete","body":  "ChoreAttrDelete( ${1:sAttrName} )", "description":  "ChoreAttrDelete deletes a chore attribute from the TM1 database." },
    "ChoreAttrInsert": { "prefix":  "ChoreAttrInsert","body":  "ChoreAttrInsert( ${1:sInsertAfterAttrName}, ${2:sAttrName}, ${3:sAttrType} )", "description":  "ChoreAttrInsert creates a new attribute for chores on your TM1 server. The function can create a string" },
    "ChoreAttrN": { "prefix":  "ChoreAttrN","body":  "ChoreAttrN( ${1:sChoreName}, ${2:sAttrName} )", "description":  "ChoreAttrN returns a numeric attribute for a specified chore." },
    "ChoreAttrNL": { "prefix":  "ChoreAttrNL","body":  "ChoreAttrNL( ${1:sChoreName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "ChoreAttrNL returns an attribute's numeric value for a specified chore with respect to a given locale." },
    "ChoreAttrPutN": { "prefix":  "ChoreAttrPutN","body":  "ChoreAttrPutN( ${1:nAttrValue}, ${2:sChoreName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ChoreAttrPutN assigns a value to a numeric chore attribute." },
    "ChoreAttrPutS": { "prefix":  "ChoreAttrPutS","body":  "ChoreAttrPutS( ${1:sAttrValue}, ${2:sChoreName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ChoreAttrPutS assigns a value to a string chore attribute." },
    "ChoreAttrS": { "prefix":  "ChoreAttrS","body":  "ChoreAttrS( ${1:sChoreName}, ${2:sAttrName} )", "description":  "ChoreAttrS returns a string attribute for a specified chore." },
    "ChoreAttrSL": { "prefix":  "ChoreAttrSL","body":  "ChoreAttrSL( ${1:sChoreName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "ChoreAttrSL returns a string attribute value for a specified chore with respect to a given locale." },
    "ChoreError": { "prefix":  "ChoreError","body":  "ChoreError()", "description":  "ChoreError causes the immediate termination of a chore. It can be called from any process within a chore. The ChoreError TurboIntegrator function causes an immediate termination of a single chore. Chores terminated with this function are flagged with an error status." },
    "ChoreQuit": { "prefix":  "ChoreQuit","body":  "ChoreQuit()", "description":  "ChoreQuit causes the immediate termination of a chore. It can be called from any process within a chore. The current chore is terminated with an error status" },
    "ChoreRollback": { "prefix":  "ChoreRollback","body":  "ChoreRollback()", "description":  "ChoreRollback initiates a chore rollback. When used inside a TurboIntegrator process" },
    "CreateHierarchyByAttribute": { "prefix":  "CreateHierarchyByAttribute","body":  "CreateHierarchyByAttribute( ${1:sDimName}, ${2:sAttrName}, ${3:[sEmptyParent]}, ${4:[sRootName]} )", "description":  "CreateHierarchyByAttribute creates a simple 3-level hierarchy from a single attribute." },
    "CubeAttrDelete": { "prefix":  "CubeAttrDelete","body":  "CubeAttrDelete( ${1:sAttrName} )", "description":  "CubeAttrDelete deletes a cube attribute from the TM1 database." },
    "CubeAttrInsert": { "prefix":  "CubeAttrInsert","body":  "CubeAttrInsert( ${1:sInsertAfterAttrName}, ${2:sAttrName}, ${3:sAttrType} )", "description":  "CubeAttrInsert creates a new attribute for cubes on your TM1 server. The function can create a string" },
    "CubeATTRNL": { "prefix":  "CubeATTRNL","body":  "CubeAttrNL( ${1:sCubeName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "CubeATTRNL returns a numeric attribute value for a specified cube with respect to a given locale." },
    "CubeAttrPutN": { "prefix":  "CubeAttrPutN","body":  "CubeAttrPutN( ${1:nAttrValue}, ${2:sCubeName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "CubeAttrPutN assigns a value to a numeric cube attribute." },
    "CubeAttrPutS": { "prefix":  "CubeAttrPutS","body":  "CubeAttrPutS( ${1:sAttrValue}, ${2:sCubeName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "CubeAttrPutS assigns a value to a string cube attribute." },
    "CubeATTRSL": { "prefix":  "CubeATTRSL","body":  "CubeAttrSL( ${1:sCubeName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "CubeATTRSL returns a string attribute value for a specified cube with respect to a given locale." },
    "CubeClearData": { "prefix":  "CubeClearData","body":  "CubeClearData( ${1:sCubeName} )", "description":  "CubeClearData clears all of the data in a cube. This function is much faster than doing an operation such as creating a view to cover the entire cube" },
    "CubeCreate": { "prefix":  "CubeCreate","body":  "CubeCreate( ${1:sCubeName}, ${2:sDimName1}, ${3:sDimName2}, ${4:[...]} )", "description":  "CubeCreate creates a cube from specified dimensions. The order of dimensions specified in the function will be the order of dimensions in the cube definition. After execution" },
    "CubeDataReservationAcquire": { "prefix":  "CubeDataReservationAcquire","body":  "CubeDataReservationAcquire( ${1:sCubeName}, ${2:sUserID}, ${3:bForce}, ${4:sCellAddress}, ${5:[sAddressDelimiter]} )", "description":  "CubeDataReservationAcquire acquires a Data Reservation for the specified cube" },
    "CubeDataReservationGet": { "prefix":  "CubeDataReservationGet","body":  "CubeDataReservationGet( ${1:nIndex}, ${2:sCubeName}, ${3:sUserID}, ${4:[sAddressDelimiter]} )", "description":  "CubeDataReservationGet finds existing reservations on a specific cube for all or one user." },
    "CubeDataReservationGetConflicts": { "prefix":  "CubeDataReservationGetConflicts","body":  "CubeDataReservationGetConflicts( ${1:nIndex}, ${2:sCubeName}, ${3:sUserID}, ${4:sCellAddress}, ${5:[sAddressDelimiter]} )", "description":  "CubeDataReservationGetConflicts finds existing reservations on a specific cube that would conflict with the specified user" },
    "CubeDataReservationRelease": { "prefix":  "CubeDataReservationRelease","body":  "CubeDataReservationRelease( ${1:sCubeName}, ${2:sUserID}, ${3:sCellAddress}, ${4:[sAddressDelimiter]} )", "description":  "CubeDataReservationRelease releases the specified Data Reservation." },
    "CubeDataReservationReleaseAll": { "prefix":  "CubeDataReservationReleaseAll","body":  "CubeDataReservationReleaseAll( ${1:sCubeName}, ${2:sUserFilter}, ${3:sCellAddress}, ${4:[sAddressDelimiter]} )", "description":  "CubeDataReservationReleaseAll releases multiple existing Data Reservations." },
    "CubeDestroy": { "prefix":  "CubeDestroy","body":  "CubeDestroy( ${1:sCubeName} )", "description":  "CubeDestroy deletes a specified TM1 cube." },
    "CubeDimensionCountGet": { "prefix":  "CubeDimensionCountGet","body":  "CubeDimensionCountGet( ${1:sCubeName} )", "description":  "CubeDimensionCountGet returns the number of dimensions in a cube." },
    "CubeDRAcquire": { "prefix":  "CubeDRAcquire","body":  "CubeDRAcquire( ${1:sCubeName}, ${2:sUserID}, ${3:bForce}, ${4:sElementList} )", "description":  "CubeDRAcquire acquires a Data Reservation for the specified cube" },
    "CubeDRGet": { "prefix":  "CubeDRGet","body":  "CubeDRGet( ${1:nIndex}, ${2:sCubeName}, ${3:sUserID}, ${4:sElementList} )", "description":  "CubeDRGet finds existing reservations on a specific cube for all or one user. While the CubeDataReservationGet applies to dimensions with a single hierarchy" },
    "CubeDRGetConflicts": { "prefix":  "CubeDRGetConflicts","body":  "CubeDRGetConflicts( ${1:nIndex}, ${2:sCubeName}, ${3:sUserID}, ${4:} )", "description":  "CubeDRGetConflicts finds existing reservations on a specific cube that would conflict with the specified user. While the CubeDataReservationGetConflicts applies to dimensions with a single hierarchy" },
    "CubeDRRelease": { "prefix":  "CubeDRRelease","body":  "CubeDRRelease( ${1:sCubeName}, ${2:sUserID}, ${3:sElementList} )", "description":  "CubeDRRelease releases the specified Data Reservation. While the CubeDataReservationRelease applies to dimensions with a single hierarchy" },
    "CubeDRReleaseAll": { "prefix":  "CubeDRReleaseAll","body":  "CubeDRReleaseAll( ${1:sCubeName}, ${2:sUserFilter}, ${3:sElementList} )", "description":  "CubeDRReleaseAll releases multiple existing Data Reservations. While the CubeDataReservationReleaseAll applies to dimensions with a single hierarchy" },
    "CubeExists": { "prefix":  "CubeExists","body":  "CubeExists( ${1:sCubeName} )", "description":  "CubeExists determines whether a specific cube exists on the server from which a TurboIntegrator process is executed. The function returns 1 if the cube exists on the server" },
    "CubeGetLogChanges": { "prefix":  "CubeGetLogChanges","body":  "CubeGetLogChanges( ${1:sCubeName} )", "description":  "CubeGetLogChanges returns the Boolean value of the Logging property for a specified cube." },
    "CubeProcessFeeders": { "prefix":  "CubeProcessFeeders","body":  "CubeProcessFeeders( ${1:sCubeName} )", "description":  "CubeProcessFeeders reprocesses all feeders in the rules for a specified cube." },
    "CubeRuleAppend": { "prefix":  "CubeRuleAppend","body":  "CubeRuleAppend( ${1:sCubeName}, ${2:sRuleText}, ${3:nIsCalculationRule} )", "description":  "CubeRuleAppend appends a single line of rule text to a TM1 cube rule." },
    "CubeRuleDestroy": { "prefix":  "CubeRuleDestroy","body":  "CubeRuleDestroy( ${1:sCubeName} )", "description":  "CubeRuleDestroy deletes any rule that exists for a specified cube." },
    "CubeSaveData": { "prefix":  "CubeSaveData","body":  "CubeSaveData( ${1:sCubeName} )", "description":  "CubeSaveData() serializes a cube." },
    "CubeSetConnParams": { "prefix":  "CubeSetConnParams","body":  "CubeSetConnParams( ${1:sCubeName}, ${2:sProviderName}, ${3:sDataSourceLocation}, ${4:sDataSourceName}, ${5:sDataSourceCatalog}, ${6:sUserID}, ${7:sPassword}, ${8:sSapClientLang} )", "description":  "CubeSetConnParams is used to encrypt the password for a virtual cube in the }CubeProperties cube." },
    "CubeSetLogChanges": { "prefix":  "CubeSetLogChanges","body":  "CubeSetLogChanges( ${1:sCubeName}, ${2:bLogChanges} )", "description":  "CubeSetLogChanges sets the Logging property for a cube." },
    "CubeTimeLastUpdated": { "prefix":  "CubeTimeLastUpdated","body":  "CubeTimeLastUpdated( ${1:sCubeName} )", "description":  "CubeTimeLastUpdated returns a serial value that indicates the date and time at which a specified cube was last updated." },
    "CubeUnload": { "prefix":  "CubeUnload","body":  "CubeUnload( ${1:sCubeName} )", "description":  "CubeUnload unloads a specified cube" },
    "DataMinorErrorCount": { "prefix":  "DataMinorErrorCount","body":  "DataMinorErrorCount", "description":  "This TurboIntegrator global variable counts the minor errors that occur in the Data portion of a TurboIntegrator process. For each minor error encountered" },
    "DatasourceASCIIDecimalSeparator": { "prefix":  "DatasourceASCIIDecimalSeparator","body":  "DatasourceASCIIDecimalSeparator = '${1:cChar}'", "description":  "This TurboIntegrator local variable sets the decimal separator to be used in any conversion of a string to a number or a number to a string. If you set this variable you must also set the DatasourceASCIIThousandSeparator variable." },
    "DatasourceASCIIDelimiter": { "prefix":  "DatasourceASCIIDelimiter","body":  "DatasourceASCIIDelimiter = '${1:cChar}'", "description":  "This TurboIntegrator local variable sets the ASCII character to be used as a field delimiter when the DatasourceType is 'CHARACTERDELIMITED'." },
    "DatasourceASCIIHeaderRecords": { "prefix":  "DatasourceASCIIHeaderRecords","body":  "DatasourceASCIIHeaderRecords = ${nNumber}", "description":  "This TurboIntegrator local variable indicates the number of records to be skipped before processing the data source." },
    "DatasourceASCIIQuoteCharacter": { "prefix":  "DatasourceASCIIQuoteCharacter","body":  "DatasourceASCIIQuoteCharacter =  '${1:cChar}'", "description":  "This TurboIntegrator local variable sets the ASCII character used to enclose the fields of the source file when DatasourceType is 'CHARACTERDELIMITED'." },
    "DatasourceASCIIThousandSeparator": { "prefix":  "DatasourceASCIIThousandSeparator","body":  "DatasourceASCIIThousandSeparator = ${1:cChar}", "description":  "This TurboIntegrator local variable sets the thousands separator to be used in any conversion of a string to a number or a number to a string." },
    "DatasourceCubeView": { "prefix":  "DatasourceCubeView","body":  "DatasourceCubeView = ${1:sCubeName}", "description":  "This TurboIntegrator local variable sets the view to process if the DatasourceType is 'VIEW'." },
    "DatasourceDimensionSubset": { "prefix":  "DatasourceDimensionSubset","body":  "DatasourceDimensionSubset =  ${1:sSubsetName}", "description":  "This TurboIntegrator local variable sets the subset to process if the DatasourceType is 'SUBSET.'" },
    "DatasourceNameForClient": { "prefix":  "DatasourceNameForClient","body":  "DatasourceNameForClient =  ${1:sDSN/sFilename/sCubeName}", "description":  "This TurboIntegrator local variable sets the name of the data source (.cma file" },
    "DatasourceNameForServer": { "prefix":  "DatasourceNameForServer","body":  "DatasourceNameForServer =  ${1:sDSN/sFilename/sCubeName}", "description":  "This TurboIntegrator local variable sets the name of the data source (.cma file" },
    "DataSourceODBOCatalog": { "prefix":  "DataSourceODBOCatalog","body":  "DataSourceODBOCatalog =  ${1:sCatalogName}", "description":  "This TurboIntegrator local variable sets the name of the database collection that contains the cubes" },
    "DataSourceODBOConnectionString": { "prefix":  "DataSourceODBOConnectionString","body":  "DataSourceODBOConnectionString =  ${1:sConnectionString}", "description":  "This TurboIntegrator local variable sets any additional connection parameters that may be required to connect to the OLAP server." },
    "DataSourceODBOCubeName": { "prefix":  "DataSourceODBOCubeName","body":  "DataSourceODBOCubeName = '${1:sCubeName}", "description":  "This TurboIntegrator local variable sets the name of the cube from the OLAP server that you want to use as a data source." },
    "DataSourceODBOHierarchyName": { "prefix":  "DataSourceODBOHierarchyName","body":  "DataSourceODBOHierarchyName = ${1:sHierName}", "description":  "This TurboIntegrator local variable sets the name of the hierarchy for the specific dimension you are using as a data source. You use this variable for other OLAP products" },
    "DataSourceODBOLocation": { "prefix":  "DataSourceODBOLocation","body":  "DataSourceODBOLocation = ${1:sSystemName}", "description":  "This TurboIntegrator local variable sets the name of the location (system) where the OLAP server is running." },
    "DataSourceODBOProvider": { "prefix":  "DataSourceODBOProvider","body":  "DataSourceODBOProvider = ${1:sProviderName}", "description":  "This TurboIntegrator local variable sets the name of the ODBO provider that you want to use as a data source. This is the full name that is assigned by the ODBO provider manufacturer to identify their multidimensional database server." },
    "DataSourceODBOSAPClientID": { "prefix":  "DataSourceODBOSAPClientID","body":  "DataSourceODBOSAPClientID = ${1:sID}", "description":  "This TurboIntegrator local variable sets the client number that corresponds to the UI version on the SAP server to which you want to connect." },
    "DataSourceODBOSAPClientLanguage": { "prefix":  "DataSourceODBOSAPClientLanguage","body":  "DataSourceODBOSAPClientLanguage = ${1:sLanguage}", "description":  "This TurboIntegrator local variable sets the language specification for the language of the SAP system to which you want to connect." },
    "DatasourcePassword": { "prefix":  "DatasourcePassword","body":  "DatasourcePassword = ${1:sPassword}", "description":  "This TurboIntegrator local variable sets the password used to connect to the data source." },
    "DatasourceQuery": { "prefix":  "DatasourceQuery","body":  "DatasourceQuery = ${1:sQuery}", "description":  "This TurboIntegrator local variable sets the query string to use with the data source." },
    "DataSourceSAPUsingRoleAuths": { "prefix":  "DataSourceSAPUsingRoleAuths","body":  "DataSourceSAPUsingRoleAuths = ${1:sFlag}", "description":  "The DataSourceSAPUsingRoleAuths local variable instructs the TurboIntegrator process to ignore security information when processing an SAP datasource. This variable must be placed in the Prolog." },
    "DataSourceSAPUsingTexts": { "prefix":  "DataSourceSAPUsingTexts","body":  "DataSourceSAPUsingTexts = ${1:sFlag}", "description":  "The DataSourceSAPUsingTexts local variable instructs the TurboIntegrator process to ignore characteristic descriptions when processing an SAP datasource" },
    "DatasourceType": { "prefix":  "DatasourceType","body":  "DatasourceType = ${1:sDSType}", "description":  "This TurboIntegrator local variable sets the type of the data source." },
    "DatasourceUsername": { "prefix":  "DatasourceUsername","body":  "DatasourceUsername = ${1:sUserName}", "description":  "This TurboIntegrator local variable sets the name used to connect to the data source." },
    "DeleteAllPersistentFeeders": { "prefix":  "DeleteAllPersistentFeeders","body":  "DeleteAllPersistentFeeders()", "description":  "DeleteAllPersistentFeeders deletes any .feeder files that have persisted. When this function is used" },
    "DeleteClient": { "prefix":  "DeleteClient","body":  "DeleteClient( ${1:sClientName} )", "description":  "DeleteClient deletes a client from the server. Changes applied through the DeleteClient function do not take effect until the Metadata procedure in a process is completed. This function" },
    "DeleteGroup": { "prefix":  "DeleteGroup","body":  "DeleteGroup( ${1:sGroupName} )", "description":  "DeleteGroup deletes a user group from the server. Changes applied through the DeleteGroup function do not take effect until the Metadata procedure in a process is completed. This function" },
    "DimensionAttrDelete": { "prefix":  "DimensionAttrDelete","body":  "DimensionAttrDelete( ${1:sAttrName} )", "description":  "DimensionAttrDelete deletes a dimension attribute from the TM1 database." },
    "DimensionAttrInsert": { "prefix":  "DimensionAttrInsert","body":  "DimensionAttrInsert( ${1:sInsertAfterAttrName}, ${2:sAttrName}, ${3:sAttrType} )", "description":  "DimensionAttrInsert creates a new attribute for dimensions on your TM1 server. The function can create a string" },
    "DimensionATTRNL": { "prefix":  "DimensionATTRNL","body":  "DimensionAttrNL( ${1:sDimName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "DimensionATTRNL returns a numeric attribute value for a specified dimension with respect to a given locale." },
    "DimensionAttrPutN": { "prefix":  "DimensionAttrPutN","body":  "DimensionAttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "DimensionAttrPutN assigns a value to a numeric dimension attribute." },
    "DimensionAttrPutS": { "prefix":  "DimensionAttrPutS","body":  "DimensionAttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "DimensionAttrPutS assigns a value to a string dimension attribute." },
    "DimensionATTRSL": { "prefix":  "DimensionATTRSL","body":  "DimensionAttrSL( ${1:sDimName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "DimensionATTRSL returns a string attribute value for a specified dimension with respect to a given locale." },
    "DimensionCreate": { "prefix":  "DimensionCreate","body":  "DimensionCreate( ${1:sDimName} )", "description":  "DimensionCreate creates a new dimension." },
    "DimensionDeleteAllElements": { "prefix":  "DimensionDeleteAllElements","body":  "DimensionDeleteAllElements( ${1:sDimName} )", "description":  "DimensionDeleteAllElements deletes all the elements in a dimension. This function is useful for recreating dimension hierarchies." },
    "DimensionDeleteElements": { "prefix":  "DimensionDeleteElements","body":  "DimensionDeleteElements( ${1:sDimName} )", "description":  "DimensionDeleteElements deletes all elements from a dimension using the subset of elements. All elements in the referenced subset are deleted" },
    "DimensionDestroy": { "prefix":  "DimensionDestroy","body":  "DimensionDestroy( ${1:sDimName} )", "description":  "DimensionDestroy deletes a dimension from the TM1 database." },
    "DimensionElementComponentAdd": { "prefix":  "DimensionElementComponentAdd","body":  "DimensionElementComponentAdd( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID}, ${4:nElemWeight} )", "description":  "DimensionElementComponentAdd adds a component (child) to a consolidated element. You can't use this function in the Epilog procedure of a TurboIntegrator process." },
    "DimensionElementComponentAddDirect": { "prefix":  "DimensionElementComponentAddDirect","body":  "DimensionElementComponentAddDirect( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID}, ${4:nElemWeight} )", "description":  "DimensionElementComponentAddDirect adds a component (child) to a consolidated element by directly editing a dimension." },
    "DimensionElementComponentDelete": { "prefix":  "DimensionElementComponentDelete","body":  "DimensionElementComponentDelete( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "DimensionElementComponentDelete deletes a component (child) from a consolidated element." },
    "DimensionElementComponentDeleteDirect": { "prefix":  "DimensionElementComponentDeleteDirect","body":  "DimensionElementComponentDeleteDirect( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "DimensionElementComponentDeleteDirect deletes a component (child) from a consolidated element by directly editing the dimension." },
    "DimensionElementDelete": { "prefix":  "DimensionElementDelete","body":  "DimensionElementDelete( ${1:sDimName}, ${2:sElemID} )", "description":  "DimensionElementDelete deletes an element from a dimension." },
    "DimensionElementDeleteDirect": { "prefix":  "DimensionElementDeleteDirect","body":  "DimensionElementDeleteDirect( ${1:sDimName}, ${2:sElemID} )", "description":  "DimensionElementDeleteDirect deletes an element from a dimension by directly editing the dimension." },
    "DimensionElementExists": { "prefix":  "DimensionElementExists","body":  "DimensionElementExists( ${1:sDimName}, ${2:sElemID} )", "description":  "DimensionElementExists determines whether a specific element exists in a dimension on the server from which a TurboIntegrator process is executed. The function returns 1 if the element exists in the dimension on the server" },
    "DimensionElementInsert": { "prefix":  "DimensionElementInsert","body":  "DimensionElementInsert( ${1:sDimName}, ${2:sInsertBeforeElemID}, ${3:sElemID}, ${4:sElemType} )", "description":  "DimensionElementInsert adds an element to a dimension. You can use this function to add numeric" },
    "DimensionElementInsertDirect": { "prefix":  "DimensionElementInsertDirect","body":  "DimensionElementInsertDirect( ${1:sDimName}, ${2:sInsertBeforeElemID}, ${3:sElemID}, ${4:sElemType} )", "description":  "DimensionElementInsertDirect adds an element to a dimension by directly editing the dimension. You can use this function to add numeric" },
    "DimensionElementPrincipalName": { "prefix":  "DimensionElementPrincipalName","body":  "DimensionElementPrincipalName( ${1:sDimName}, ${2:sElemID} )", "description":  "DimensionElementPrincipalName returns the principal name of an element or element alias." },
    "DimensionExists": { "prefix":  "DimensionExists","body":  "DimensionExists( ${1:sDimName} )", "description":  "DimensionExists determines whether a specific dimension exists on the server from which a TurboIntegrator process is executed. The function returns 1 if the dimension exists on the server" },
    "DimensionHierarchyCreate": { "prefix":  "DimensionHierarchyCreate","body":  "DimensionHierarchyCreate( ${1:sDimName}, ${2:sHierName} )", "description":  "DimensionHierarchyCreate creates a new hierarchy in an existing dimension. The hierarchy cannot have the same name as the dimension." },
    "DimensionSortOrder": { "prefix":  "DimensionSortOrder","body":  "DimensionSortOrder( ${1:sDimName}, ${2:sCompSortType}, ${3:sCompSortSense}, ${4:sElemSortType}, ${5:sElemSortSense} )", "description":  "DimensionSortOrder sets a sort type and sense for dimension elements and for components of consolidated elements within a dimension. The sort order defined by DimensionSortOrder determines how the subset displays in the Subset Editor." },
    "DimensionTimeLastUpdated": { "prefix":  "DimensionTimeLastUpdated","body":  "DimensionTimeLastUpdated( ${1:sDimName} )", "description":  "DimensionTimeLastUpdated returns a serial value that indicates the date and time at which a specified dimension was last updated." },
    "DimensionTopElementInsert": { "prefix":  "DimensionTopElementInsert","body":  "DimensionTopElementInsert( ${1:sDimName}, ${2:sInsertBeforeElemID}, ${3:sElemID} )", "description":  "DimensionTopElementInsert creates a root element in a dimension. If the dimension already has a single root" },
    "DimensionTopElementInsertDirect": { "prefix":  "DimensionTopElementInsertDirect","body":  "DimensionTopElementInsertDirect( ${1:sDimName}, ${2:sInsertBeforeElemID}, ${3:sElemID} )", "description":  "DimensionTopElementInsertDirect creates a root element in a dimension by directly editing the dimension. If the dimension already has a single root" },
    "DimensionUpdateDirect": { "prefix":  "DimensionUpdateDirect","body":  "DimensionUpdateDirect( ${1:sDimName} )", "description":  "DimensionUpdateDirect performs a full rewrite of a dimension that has been subject to direct editing in a TurboIntegrator process" },
    "DisableBulkLoadMode": { "prefix":  "DisableBulkLoadMode","body":  "DisableBulkLoadMode()", "description":  "DisableBulkLoadMode disables bulk load processing." },
    "DisableMTQViewConstruct": { "prefix":  "DisableMTQViewConstruct","body":  "DisableMTQViewConstruct()", "description":  "DisableMTQViewConstruct disables multi-threaded query processing when calculating a view to be used as a TurboIntegrator datasource for a single TurboIntegrator process. When MTQQuery=T in the tms1.cfg file" },
    "ElementAttrDelete": { "prefix":  "ElementAttrDelete","body":  "ElementAttrDelete( ${1:sDimName}, ${2:sHierName}, ${3:sAttrName} )", "description":  "ElementAttrDelete deletes an element attribute from the TM1 database." },
    "ElementAttrInsert": { "prefix":  "ElementAttrInsert","body":  "ElementAttrInsert( ${1:sDimName}, ${2:sHierName}, ${3:sPrevAttr}, ${4:sAttrName}, ${5:sType} )", "description":  "ElementAttrInsert creates a new element attribute for a dimension. The function can create a string" },
    "ElementATTRNL": { "prefix":  "ElementATTRNL","body":  "ElementAttrNL( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "ElementATTRNL returns a numeric attribute for a specified element of a dimension." },
    "ElementAttrPutN": { "prefix":  "ElementAttrPutN","body":  "ElementAttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sElemID}, ${5:sAttrName}, ${6:[sLangLocaleCode]} )", "description":  "ElementAttrPutN assigns a value to a numeric element attribute." },
    "ElementAttrPutS": { "prefix":  "ElementAttrPutS","body":  "ElementAttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sElemID}, ${5:sAttrName}, ${6:[sLangLocaleCode]} )", "description":  "ElementAttrPutS assigns a value to a string element attribute." },
    "ElementATTRSL": { "prefix":  "ElementATTRSL","body":  "ElementAttrSL( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "ElementATTRSL returns a string attribute for a specified element of a dimension." },
    "ElementSecurityGet": { "prefix":  "ElementSecurityGet","body":  "ElementSecurityGet( ${1:sDimName}, ${2:sElemID}, ${3:sGroupName} )", "description":  "ElementSecurityGet retrieves the security level assigned to a specified group for a dimension element." },
    "ElementSecurityPut": { "prefix":  "ElementSecurityPut","body":  "ElementSecurityPut( ${1:sSecurityLevel}, ${2:sDimName}, ${3:sElemID}, ${4:sGroupName} )", "description":  "ElementSecurityPut assigns a security level to a specified group for a dimension element." },
    "EnableBulkLoadMode": { "prefix":  "EnableBulkLoadMode","body":  "EnableBulkLoadMode()", "description":  "EnableBulkLoadMode enables bulk load processing for a TurboIntegrator process." },
    "EnableMTQViewConstruct": { "prefix":  "EnableMTQViewConstruct","body":  "EnableMTQViewConstruct()", "description":  "EnableMTQViewConstruct enables multi-threaded query processing when calculating a view to be used as a TurboIntegrator datasource for a single TurboIntegrator process. When MTQQuery=F in the tms1.cfg file" },
    "ExecuteCommand": { "prefix":  "ExecuteCommand","body":  "ExecuteCommand( ${1:sCommandLine}, ${2:bWait} )", "description":  "ExecuteCommand executes a command line during a process. You can use ExecuteCommand to run a desktop application" },
    "ExecuteJavaN": { "prefix":  "ExecuteJavaN","body":  "ExecuteJavaN( ${1:sJavaTIClassName}, ${2:[sParameter1]}, ${3:[sParameter2]}, ${4:[...]} )", "description":  "ExecuteJavaN executes a Java™ TurboIntegrator process that returns a number. If you want to execute a Java TurboIntegrator process that returns a string" },
    "ExecuteJavaS": { "prefix":  "ExecuteJavaS","body":  "ExecuteJavaS( ${1:sJavaTIClassName}, ${2:[sParameter1]}, ${3:[sParameter2]}, ${4:[...]} )", "description":  "ExecuteJavaS executes a Java TurboIntegrator process that returns a string. If you want to execute a Java TurboIntegrator process that returns a number" },
    "ExecuteProcess": { "prefix":  "ExecuteProcess","body":  "ExecuteProcess( ${1:sProcessName}, ${2:[sParamName1]}, ${3:[sParamValue1]}, ${4:[sParamName2]}, ${5:[nParamValue2]}, ${6:[...]} )", "description":  "ExecuteProcess lets you execute a TurboIntegrator process from within another process." },
    "Expand": { "prefix":  "Expand","body":  "Expand( ${1:sVariableName} )", "description":  "Expand expands TurboIntegrator variable names" },
    "FileExists": { "prefix":  "FileExists","body":  "FileExists( ${1:sFileName} )", "description":  "FileExists determines whether a specified file exists. The function returns 1 if the file exists" },
    "ForceSkipCheck": { "prefix":  "ForceSkipCheck","body":  "ForceSkipCheck()", "description":  "ForceSkipCheck forces the query to perform as if the cube had a SKIPCHECK in the rules." },
    "FormatDate": { "prefix":  "FormatDate","body":  "FormatDate( ${1:nSerialDate}, ${2:sPattern}, ${3:nIndex} )", "description":  "FormatDate formats a date value according to a formatter defined with the NewDateFormatter function." },
    "GetProcessErrorFileDirectory": { "prefix":  "GetProcessErrorFileDirectory","body":  "GetProcessErrorFileDirectory()", "description":  "GetProcessErrorFileDirectory returns the full pathname" },
    "GetProcessErrorFilename": { "prefix":  "GetProcessErrorFilename","body":  "GetProcessErrorFilename()", "description":  "GetProcessErrorFilename returns the name of the TurboIntegrator process error log file associated with a process. If the process has not yet generated an error log file" },
    "GetProcessName": { "prefix":  "GetProcessName","body":  "GetProcessName()", "description":  "GetProcessName returns as a string the name of the current process." },
    "GetUseActiveSandboxProperty": { "prefix":  "GetUseActiveSandboxProperty","body":  "GetUseActiveSandboxProperty()", "description":  "GetUseActiveSandboxProperty returns a Boolean value that indicates whether a process reads and writes data to the base data or to the user's active sandbox." },
    "HierarchyATTRN": { "prefix":  "HierarchyATTRN","body":  "HierarchyAttrN( ${1:sDimName}, ${2:sHierName}, ${3:sAttrName} )", "description":  "HierarchyATTRN returns a numeric attribute for a specified hierarchy within a dimension." },
    "HierarchyATTRNL": { "prefix":  "HierarchyATTRNL","body":  "HierarchyAttrNL( ${1:sDimName}, ${2:sHierName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "HierarchyATTRNL returns a numeric attribute value for a specified hierarchy within a dimension with respect to a given locale." },
    "HierarchyAttrPutN": { "prefix":  "HierarchyAttrPutN","body":  "HierarchyAttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "HierarchyAttrPutN assigns a value to a numeric attribute in a specified hierarchy within a dimension." },
    "HierarchyAttrPutS": { "prefix":  "HierarchyAttrPutS","body":  "HierarchyAttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "HierarchyAttrPutS assigns a value to a string attribute in a specified hierarchy within a dimension." },
    "HierarchyATTRS": { "prefix":  "HierarchyATTRS","body":  "HierarchyAttrS( ${1:sDimName}, ${2:sAttrName} )", "description":  "HierarchyATTRS returns a string attribute for a specified hierarchy within a dimension." },
    "HierarchyATTRSL": { "prefix":  "HierarchyATTRSL","body":  "HierarchyAttrSL( ${1:sDimName}, ${2:sHierName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "HierarchyATTRSL returns a string attribute value for a specified hierarchy within a dimension with respect to a given locale." },
    "HierarchyContainsAllLeaves": { "prefix":  "HierarchyContainsAllLeaves","body":  "HierarchyContainsAllLeaves( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyContainsAllLeaves returns true only if the specified hierarchy contains the full set of leaf elements that are present in the dimension. That is" },
    "HierarchyCreate": { "prefix":  "HierarchyCreate","body":  "HierarchyCreate( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyCreate creates a new hierarchy in an existing dimension. The hierarchy cannot have the same name as the dimension." },
    "HierarchyDeleteAllElements": { "prefix":  "HierarchyDeleteAllElements","body":  "HierarchyDeleteAllElements( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyDeleteAllElements deletes all the elements in a hierarchy. This function is useful for recreating dimension hierarchies." },
    "HierarchyDeleteElements": { "prefix":  "HierarchyDeleteElements","body":  "HierarchyDeleteElements( ${1:sDimName}, ${2:sHierName}, ${2:sSubsetName} )", "description":  "HierarchyDeleteElements deletes leaf elements from a hierarchy using a subset of elements." },
    "HierarchyDestroy": { "prefix":  "HierarchyDestroy","body":  "HierarchyDestroy( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyDestroy deletes a hierarchy from the TM1 database." },
    "HierarchyElementComponentAdd": { "prefix":  "HierarchyElementComponentAdd","body":  "HierarchyElementComponentAdd( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID}, ${5:nElemWeight} )", "description":  "HierarchyElementComponentAdd adds a component (child) to a consolidated element. You can't use this function in the Epilog procedure of a TurboIntegrator process." },
    "HierarchyElementComponentAddDirect": { "prefix":  "HierarchyElementComponentAddDirect","body":  "HierarchyElementComponentAddDirect( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID}, ${5:nElemWeight} )", "description":  "HierarchyElementComponentAddDirect adds a component (child) to a consolidated element by directly editing a dimension." },
    "HierarchyElementComponentDelete": { "prefix":  "HierarchyElementComponentDelete","body":  "HierarchyElementComponentDelete( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "HierarchyElementComponentDelete deletes a component (child) from a consolidated element." },
    "HierarchyElementComponentDeleteDirect": { "prefix":  "HierarchyElementComponentDeleteDirect","body":  "HierarchyElementComponentDeleteDirect( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "HierarchyElementComponentDeleteDirect deletes a component (child) from a consolidated element by directly editing the dimension." },
    "HierarchyElementDelete": { "prefix":  "HierarchyElementDelete","body":  "HierarchyElementDelete( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "HierarchyElementDelete deletes an element from a hierarchy." },
    "HierarchyElementDeleteDirect": { "prefix":  "HierarchyElementDeleteDirect","body":  "HierarchyElementDeleteDirect( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "HierarchyElementDeleteDirect deletes an element from a dimension by directly editing the dimension." },
    "HierarchyElementExists": { "prefix":  "HierarchyElementExists","body":  "HierarchyElementExists( ${1:sDimName}, ${2:sHierName}, ${2:sElemID} )", "description":  "HierarchyElementExists determines whether a specific elements exists in a hierarchy on the server from which a TurboIntegrator process is executed. The function returns 1 if the elements exists in the hierarchy on the server" },
    "HierarchyElementInsert": { "prefix":  "HierarchyElementInsert","body":  "HierarchyElementInsert( ${1:sDimName}, ${2:sHierName}, ${3:sInsertBeforeElemID}, ${4:sElemID}, ${5:sElemType} )", "description":  "HierarchyElementInsert adds an element to a dimension. You can use this function to add numeric" },
    "HierarchyElementInsertDirect": { "prefix":  "HierarchyElementInsertDirect","body":  "HierarchyElementInsertDirect( ${1:sDimName}, ${2:sHierName}, ${3:sInsertBeforeElemID}, ${4:sElemID}, ${5:sElemType} )", "description":  "HierarchyElementInsertDirect adds an element to a dimension by directly editing the dimension. You can use this function to add numeric" },
    "HierarchyElementPrincipalName": { "prefix":  "HierarchyElementPrincipalName","body":  "HierarchyElementPrincipalName( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "HierarchyElementPrincipalName returns the principal name of an element or element alias." },
    "HierarchyElementSecurityGet": { "prefix":  "HierarchyElementSecurityGet","body":  "HierarchyElementSecurityGet( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sGroupName} )", "description":  "HierarchyElementSecurityGet retrieves the security level assigned to a specified group for a dimension element." },
    "HierarchyElementSecurityPut": { "prefix":  "HierarchyElementSecurityPut","body":  "HierarchyElementSecurityPut( ${1:sSecurityLevel}, ${2:sDimName}, ${3:sHierName}, ${4:sElemID}, ${5:sGroupName} )", "description":  "HierarchyElementSecurityPut assigns a security level to a specified group for a dimension element." },
    "HierarchyExists": { "prefix":  "HierarchyExists","body":  "HierarchyExists( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyExists determines whether a specific hierarchy exists on the server from which a TurboIntegrator process is executed. The function returns 1 if the hierarchy exists on the server" },
    "HierarchyHasOrphanedLeaves": { "prefix":  "HierarchyHasOrphanedLeaves","body":  "HierarchyHasOrphanedLeaves( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyHasOrphanedLeaves returns 1 if there are one or more elements in the specified hierarchy that are not components of a parent element in that hierarchy." },
    "HierarchySortOrder": { "prefix":  "HierarchySortOrder","body":  "HierarchySortOrder( ${1:sDimName}, ${2:sHierName}, ${3:sCompSortType}, ${4:sCompSortSense}, ${5:sElemSortType}, ${6:sElemSortSense} )", "description":  "HierarchySortOrder sets a sort type and sense for dimension elements and for components of consolidated elements within a dimension. The sort order defined by DimensionSortOrder determines how the subset displays in the Subset Editor." },
    "HierarchySubsetAliasSet": { "prefix":  "HierarchySubsetAliasSet","body":  "HierarchySubsetAliasSet( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sAliasName} )", "description":  "HierarchySubsetAliasSet sets the alias attribute to be used in a subset. HierarchySubsetAliasSet returns 1 if successful" },
    "HierarchySubsetAttrDelete": { "prefix":  "HierarchySubsetAttrDelete","body":  "HierarchySubsetAttrDelete( ${1:sDimName}, ${2:sHierName}, ${3:sAttrName} )", "description":  "HierarchySubsetAttrDelete deletes a subset attribute from the TM1 database." },
    "HierarchySubsetAttrInsert": { "prefix":  "HierarchySubsetAttrInsert","body":  "HierarchySubsetAttrInsert( ${1:sDimName}, ${2:sHierName}, ${3:sInsertAfterAttrName}, ${4:sAttrName}, ${5:sAttrType} )", "description":  "HierarchySubsetAttrInsert creates a new attribute for subsets on your TM1 server. The function creates a string" },
    "HierarchySubsetATTRN": { "prefix":  "HierarchySubsetATTRN","body":  "HierarchySubsetAttrN( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sAttrName} )", "description":  "HierarchySubsetATTRN returns a numeric attribute for a specified subset associated with a hierarchy in a dimension." },
    "HierarchySubsetATTRNL": { "prefix":  "HierarchySubsetATTRNL","body":  "HierarchySubsetAttrNL( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "HierarchySubsetATTRNL returns an attribute's numeric value for a specified subset (and locale) associated with a hierarchy in a dimension." },
    "HierarchySubsetAttrPutN": { "prefix":  "HierarchySubsetAttrPutN","body":  "HierarchySubsetAttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sSubsetName}, ${5:sAttrName}, ${6:[LocalLangCode]} )", "description":  "HierarchySubsetAttrPutN assigns a numeric value to an attribute for a specified subset associated with a hierarchy in a dimension." },
    "HierarchySubsetAttrPutS": { "prefix":  "HierarchySubsetAttrPutS","body":  "HierarchySubsetAttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sHierName}, ${4:sSubsetName}, ${5:sAttrName}, ${6:[sLangLocaleCode]} )", "description":  "HierarchySubsetAttrPutS assigns a string value to an attribute for a specified subset associated with a hierarchy in a dimension." },
    "HierarchySubsetATTRS": { "prefix":  "HierarchySubsetATTRS","body":  "HierarchySubsetAttrS( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sAttrName} )", "description":  "HierarchySubsetATTRS returns a string attribute for a specified subset associated with a hierarchy in a dimension." },
    "HierarchySubsetATTRSL": { "prefix":  "HierarchySubsetATTRSL","body":  "HierarchySubsetAttrSL( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "HierarchySubsetATTRSL returns an attribute's string value for a specified subset (and locale) associated with a hierarchy in a dimension." },
    "HierarchySubsetCreate": { "prefix":  "HierarchySubsetCreate","body":  "HierarchySubsetCreate( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:[bAsTemporary]} )", "description":  "HierarchySubsetCreate creates an empty public subset of a specified hierarchy and dimension." },
    "HierarchySubsetDeleteAllElements": { "prefix":  "HierarchySubsetDeleteAllElements","body":  "HierarchySubsetDeleteAllElements( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName} )", "description":  "HierarchySubsetDeleteAllElements deletes all elements from a public subset of a dimension hierarchy." },
    "HierarchySubsetDestroy": { "prefix":  "HierarchySubsetDestroy","body":  "HierarchySubsetDestroy( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName} )", "description":  "HierarchySubsetDestroy deletes a subset from the TM1 database." },
    "HierarchySubsetElementDelete": { "prefix":  "HierarchySubsetElementDelete","body":  "HierarchySubsetElementDelete( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:nIndex} )", "description":  "HierarchySubsetElementDelete deletes an element from a subset of a dimension hierarchy." },
    "HierarchySubsetElementExists": { "prefix":  "HierarchySubsetElementExists","body":  "HierarchySubsetElementExists( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sElemID} )", "description":  "HierarchySubsetElementExists determines whether a specific element exists within a specific public subset on the server from which a TurboIntegrator process is executed. HierarchySubsetElementExists cannot be used to determine if an element exists in a private subset." },
    "HierarchySubsetElementGetIndex": { "prefix":  "HierarchySubsetElementGetIndex","body":  "HierarchySubsetElementGetIndex( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sElemID}, ${5:nStartIndex} )", "description":  "HierarchySubsetElementGetIndex retrieves the index of an element in a subset of a dimension hierarchy." },
    "HierarchySubsetElementInsert": { "prefix":  "HierarchySubsetElementInsert","body":  "HierarchySubsetElementInsert( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:sElemID}, ${5:nIndex} )", "description":  "HierarchySubsetElementInsert adds an element to an existing subset in a dimension hierarchy." },
    "HierarchySubsetExists": { "prefix":  "HierarchySubsetExists","body":  "HierarchySubsetExists( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName} )", "description":  "HierarchySubsetExists determines if a specific public subset exists on the server from which a TurboIntegrator process is executed. The function returns 1 if the subset exists on the server" },
    "HierarchySubsetGetElementName": { "prefix":  "HierarchySubsetGetElementName","body":  "HierarchySubsetGetElementName( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:nElemIndex} )", "description":  "HierarchySubsetGetElementName returns the name of the element at a specified index location within a given subset of a dimension hierarchy." },
    "HierarchySubsetGetSize": { "prefix":  "HierarchySubsetGetSize","body":  "HierarchySubsetGetSize( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName} )", "description":  "HierarchySubsetGetSize returns the number of elements in a subset of a dimension hierarchy." },
    "HierarchySubsetIsAllSet": { "prefix":  "HierarchySubsetIsAllSet","body":  "HierarchySubsetIsAllSet( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:bAllSet} )", "description":  "HierarchySubsetIsAllSet sets a subset to use all elements of the parent dimension. HierarchySubsetIsAllSet returns 1 if successful" },
    "HierarchySubsetMDXGet": { "prefix":  "HierarchySubsetMDXGet","body":  "HierarchySubsetMDXGet( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName} )", "description":  "HierarchySubsetMDXGet retrieves the MDX expression used to create a subset." },
    "HierarchySubsetMDXSet": { "prefix":  "HierarchySubsetMDXSet","body":  "HierarchySubsetMDXSet( ${1:sDimName}, ${2:sHierName}, ${3:sSubsetName}, ${4:[sMDX]} )", "description":  "HierarchySubsetMDXSet applies a specified MDX expression to an existing public subset of a hierarchy." },
    "HierarchyTimeLastUpdated": { "prefix":  "HierarchyTimeLastUpdated","body":  "HierarchyTimeLastUpdated( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyTimeLastUpdated indicates when a specified dimension hierarchy was last updated. The function returns a real number that represents the current day (including the hour" },
    "HierarchyTopElementInsert": { "prefix":  "HierarchyTopElementInsert","body":  "HierarchyTopElementInsert( ${1:sDimName}, ${2:sHierName}, ${3:sInsertBeforeElemID}, ${4:sElemID} )", "description":  "HierarchyTopElementInsert creates a root element in a dimension. If the dimension already has a single root" },
    "HierarchyTopElementInsertDirect": { "prefix":  "HierarchyTopElementInsertDirect","body":  "HierarchyTopElementInsertDirect( ${1:sDimName}, ${2:sHierName}, ${3:sInsertBeforeElemID}, ${4:sElemID} )", "description":  "HierarchyTopElementInsertDirect creates a root element in a dimension by directly editing the dimension. If the dimension already has a single root" },
    "HierarchyUpdateDirect": { "prefix":  "HierarchyUpdateDirect","body":  "HierarchyUpdateDirect( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyUpdateDirect performs a full rewrite of a hierarchy that has been subject to direct editing in a TurboIntegrator process" },
    "If": { "prefix":  "If","body":  "IF( ${1:Expression}, ${2:TrueValue}, ${3:FalseValue} )", "description":  "The If statement allows a process to execute a statement or series of statements when a given expression is true. You can use arithmetic operators" },
    "ItemReject": { "prefix":  "ItemReject","body":  "ItemReject( ${1:sErrorMessage} )", "description":  "ItemReject rejects a source record and places it in the error log" },
    "ItemSkip": { "prefix":  "ItemSkip","body":  "ItemSkip()", "description":  "ItemSkip forces a process to skip the current data source item." },
    "LogOutput": { "prefix":  "LogOutput","body":  "LogOutput( ${1:sSeverityLevel}, ${2:sMessage} )", "description":  "LogOutput writes a message to the tm1server.log file when an error of a specified severity level is encountered in a TurboIntegrator process." },
    "MetadataMinorErrorCount": { "prefix":  "MetadataMinorErrorCount","body":  "MetadataMinorErrorCount", "description":  "This TurboIntegrator global variable counts the minor errors that occur in the Metadata portion of a TurboIntegrator process. For each minor error encountered" },
    "MinorErrorLogMax": { "prefix":  "MinorErrorLogMax","body":  "MinorErrorLogMax = ${nMax}", "description":  "This TurboIntegrator local variable defines the number of minor errors that will be written to the TM1ProcessError.log file during process execution. If this variable is not defined in the process" },
    "NewDateFormatter": { "prefix":  "NewDateFormatter","body":  "NewDateFormatter( ${1:sLocale}, ${2:[sTimeZone]}, ${3:[sUseUNIXTime]}, ${4:[sFormatterStyle]}, ${5:[sFormatterType]}, ${6:[sTimeType]} )", "description":  "NewDateFormatter defines a date formatter. It returns an index for use in the ParseDate and FormatDate functions. The indices start at 0 and go up by one for each call to NewDateFormat. Date formatters are valid during execution of the process." },
    "NumberToString": { "prefix":  "NumberToString","body":  "NumberToString( ${1:nConvertValue} )", "description":  "NumberToString converts a number to a string" },
    "NumberToStringEx": { "prefix":  "NumberToStringEx","body":  "NumberToStringEx( ${1:nConvertValue}, ${2:sNumericFormat}, ${3:sDecimalSep}, ${4:sThousandsSep} )", "description":  "NumberToStringEx converts a number to a string" },
    "NumericGlobalVariable": { "prefix":  "NumericGlobalVariable","body":  "NumericGlobalVariable( ${1:sVariableName} )", "description":  "Use this function to declare a numeric global variable." },
    "NValue": { "prefix":  "NValue","body":  "NValue", "description":  "When the DatasourceType is 'VIEW'" },
    "ODBCClose": { "prefix":  "ODBCClose","body":  "ODBCClose( ${1:sSourceName} )", "description":  "ODBCClose closes a connection to an ODBC data source." },
    "ODBCOpen": { "prefix":  "ODBCOpen","body":  "ODBCOpen( ${1:sSourceName}, ${2:sClientName}, ${3:sPassword} )", "description":  "ODBCOpen opens an ODBC data source for output." },
    "ODBCOPENEx": { "prefix":  "ODBCOPENEx","body":  "ODBCOpenEx( ${1:sSourceName}, ${2:sClientName}, ${3:sPassword}, ${4:nUseUnicodeODBC} )", "description":  "ODBCOPENEx opens an ODBC data source for output specifying that the connection should be opened as a Unicode connection." },
    "ODBCOutput": { "prefix":  "ODBCOutput","body":  "ODBCOutput( ${1:sSourceName}, ${2:sSQLQuery}, ${3:[sSQLQuery2]}, ${4:[sSQLQuery3]}, ${5:[...]} )", "description":  "ODBCOutput executes an SQL update query against an open ODBC data source. You should use the ODBCOpen function to open the data source before calling ODBCOutput" },
    "OnMinorErrorDoItemSkip": { "prefix":  "OnMinorErrorDoItemSkip","body":  "OnMinorErrorDoItemSkip = ${1:bSkip}", "description":  "This TurboIntegrator local variable instructs TurboIntegrator to skip to the next record when a minor error is encountered while processing a record." },
    "ParseDate": { "prefix":  "ParseDate","body":  "ParseDate( ${1:sFormattedDate}, ${2:sPattern}, ${3:nIndex} )", "description":  "ParseDate parses a date string according to a formatter defined with the NewDateFormatter function." },
    "ProcessAttrDelete": { "prefix":  "ProcessAttrDelete","body":  "ProcessAttrDelete( ${1:sAttrName} )", "description":  "ProcessAttrDelete deletes a process attribute from the TM1 database." },
    "ProcessAttrInsert": { "prefix":  "ProcessAttrInsert","body":  "ProcessAttrInsert( ${1:sInsertAfterAttrName}, ${2:sAttrName}, ${3:sAttrType} )", "description":  "ProcessAttrInsert creates a new attribute for processes on your TM1 server. The function can create a string" },
    "ProcessAttrN": { "prefix":  "ProcessAttrN","body":  "ProcessAttrN( ${1:sProcessName}, ${2:sAttrName} )", "description":  "ProcessAttrN returns a numeric attribute for a specified process." },
    "ProcessAttrNL": { "prefix":  "ProcessAttrNL","body":  "ProcessAttrNL( ${1:sProcessName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "ProcessAttrNL returns an attribute's numeric value for a specified process with respect to a given locale." },
    "ProcessAttrPutN": { "prefix":  "ProcessAttrPutN","body":  "ProcessAttrPutN( ${1:nAttrValue}, ${2:sCubeName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ProcessAttrPutN assigns a value to a numeric process attribute." },
    "ProcessAttrPutS": { "prefix":  "ProcessAttrPutS","body":  "ProcessAttrPutS( ${1:sAttrValue}, ${2:sProcessName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ProcessAttrPutS assigns a value to a string process attribute." },
    "ProcessAttrS": { "prefix":  "ProcessAttrS","body":  "ProcessAttrS( ${1:sProcessName}, ${2:sAttrName} )", "description":  "ProcessAttrS returns a string attribute for a specified process." },
    "ProcessAttrSL": { "prefix":  "ProcessAttrSL","body":  "ProcessAttrSL( ${1:sProcessName}, ${2:sAttrName}, ${3:[sLangLocaleCode]} )", "description":  "ProcessAttrSL returns a string attribute value for a specified process with respect to a given locale." },
    "ProcessBreak": { "prefix":  "ProcessBreak","body":  "ProcessBreak()", "description":  "ProcessBreak stops processing source data and proceeds to the Epilog portion of a process." },
    "ProcessError": { "prefix":  "ProcessError","body":  "ProcessError()", "description":  "ProcessError causes an immediate termination of a process." },
    "ProcessExists": { "prefix":  "ProcessExists","body":  "ProcessExists( ${1:sProcessName} )", "description":  "ProcessExists determines whether a specific TurboIntegrator process exists." },
    "ProcessQuit": { "prefix":  "ProcessQuit","body":  "ProcessQuit()", "description":  "ProcessQuit terminates a TurboIntegrator process." },
    "ProcessReturnCode": { "prefix":  "ProcessReturnCode","body":  "ProcessReturnCode = ${1:nStatusCode}", "description":  "This TurboIntegrator global variable stores the exit status of the most recently executed TurboIntegrator process." },
    "ProcessRollback": { "prefix":  "ProcessRollback","body":  "ProcessRollback()", "description":  "ProcessRollback initiates a process rollback. When used inside a TurboIntegrator process" },
    "PrologMinorErrorCount": { "prefix":  "PrologMinorErrorCount","body":  "PrologMinorErrorCount", "description":  "This TurboIntegrator global variable counts the minor errors that occur in the Prolog portion of a TurboIntegrator process. For each minor error encountered" },
    "PublishView": { "prefix":  "PublishView","body":  "PublishView( ${1:sCubeName}, ${2:sViewName}, ${3:bPublishPrivateSubsets}, ${4:bOverwriteExistingView} )", "description":  "PublishView publishes a named private view on the server." },
    "RefreshMdxHierarchy": { "prefix":  "RefreshMdxHierarchy","body":  "RefreshMdxHierarchy( ${1:sDimName}, ${2:sHierName} )", "description":  "RefreshMdxHierarchy updates the MDX hierarchies in a server without requiring you to restart the server." },
    "RemoveCAMIDAssociation": { "prefix":  "RemoveCAMIDAssociation","body":  "RemoveCAMIDAssociation( ${1:sCAMID}, ${2:bRemove} )", "description":  "RemoveCAMIDAssociation removes all associations between TM1 user groups and a specified CAMID." },
    "RemoveCAMIDAssociationFromGroup": { "prefix":  "RemoveCAMIDAssociationFromGroup","body":  "RemoveCAMIDAssociationFromGroup( ${1:sGroupName}, ${2:sCAMID} )", "description":  "RemoveCAMIDAssociationFromGroup removes an association between a TM1 user group and a CAMID." },
    "RemoveClientFromGroup": { "prefix":  "RemoveClientFromGroup","body":  "RemoveClientFromGroup( ${1:sClientName}, ${2:sGroupName} )", "description":  "RemoveClientFromGroup removes a specified client from a user group." },
    "RuleLoadFromFile": { "prefix":  "RuleLoadFromFile","body":  "RuleLoadFromFile( ${1:sCubeName}, ${2:sTextFile} )", "description":  "RuleLoadFromFile creates a TM1 rule for a specified cube from a text file. Each rule statement must end with a semi-colon (;) and comments must be prefixed with the # character. If a rule already exists for the specified cube" },
    "RunProcess": { "prefix":  "RunProcess","body":  "RunProcess( ${1:{sProcessName}, ${2:sParamName}, ${3:sParamValue}, ${4:…} )", "description":  "RunProcess lets you run TurboIntegrator processes in parallel" },
    "SaveDataAll": { "prefix":  "SaveDataAll","body":  "SaveDataAll()", "description":  "SaveDataAll saves all TM1 data from server memory to disk and restarts the log file." },
    "SecurityOverlayCreateGlobalDefault": { "prefix":  "SecurityOverlayCreateGlobalDefault","body":  "SecurityOverlayCreateGlobalDefault( ${1:sCubeName}, ${2:sDimensionMap} )", "description":  "SecurityOverlayCreateGlobalDefault is used to create or destroy a Security Overlay cube" },
    "SecurityOverlayDestroyGlobalDefault": { "prefix":  "SecurityOverlayDestroyGlobalDefault","body":  "SecurityOverlayDestroyGlobalDefault( ${1:sCubeName} )", "description":  "SecurityOverlayDestroyGlobalDefault is used to destroy a Security Overlay cube" },
    "SecurityOverlayGlobalLockCell": { "prefix":  "SecurityOverlayGlobalLockCell","body":  "SecurityOverlayGlobalLockCell( ${1:bLock}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:[...]} )", "description":  "SecurityOverlayGlobalLockCell is used to restrict the access rights of a node to read-only by locking it. It uses the global overlay so all users are affected. The overlay cube must be created prior to using this command. The elements provided in the address must be only for the dimensions used in the overlay." },
    "SecurityOverlayGlobalLockNode": { "prefix":  "SecurityOverlayGlobalLockNode","body":  "SecurityOverlayGlobalLockNode( ${1:bLock}, ${2:sCubeName}, ${3:sAddress}, ${4:[sAddressDelimiter]} )", "description":  "SecurityOverlayGlobalLockNode is used to restrict the access rights of a node to read-only by locking it. It uses the global overlay so all users are affected. The overlay cube must be created prior to using this command. The elements provided in the address must be only for the dimensions used in the overlay." },
    "SecurityRefresh": { "prefix":  "SecurityRefresh","body":  "SecurityRefresh()", "description":  "SecurityRefresh reads all the security control cubes and regenerates the internal structures in the server that are used by TM1 API functions." },
    "ServerActiveSandboxGet": { "prefix":  "ServerActiveSandboxGet","body":  "ServerActiveSandboxGet()", "description":  "ServerActiveSandboxGet returns the name of the user's active sandbox. If the user has no active sandbox" },
    "ServerActiveSandboxSet": { "prefix":  "ServerActiveSandboxSet","body":  "ServerActiveSandboxSet( ${1:sSandboxName} )", "description":  "ServerActiveSandboxSet sets the active sandbox of the executing user. An empty string is used to clear the executing user's active sandbox. This function throws an error if the executing user does not own a sandbox with the passed name." },
    "ServerSandboxClone": { "prefix":  "ServerSandboxClone","body":  "ServerSandboxClone( ${1:sSandboxName}, ${2:sNewSandboxName} )", "description":  "ServerSandboxClone clones an existing sandbox into a new sandbox." },
    "ServerSandboxCreate": { "prefix":  "ServerSandboxCreate","body":  "ServerSandboxCreate( ${1:sSandboxName} )", "description":  "ServerSandboxCreate creates a new sandbox." },
    "ServerSandboxDiscardAllChanges": { "prefix":  "ServerSandboxDiscardAllChanges","body":  "ServerSandboxDiscardAllChanges( ${1:sSandboxName} )", "description":  "ServerSandboxDiscardAllChanges discards all changes in an existing sandbox." },
    "ServerSandboxesDelete": { "prefix":  "ServerSandboxesDelete","body":  "ServerSandboxesDelete( ${1:sSeeTheRefGuide}, ${2:sSeeTheRefGuide}, ${3:sSeeTheRefGuide} )", "description":  "ServerSandboxesDelete allows administrators to discard user sandboxes that match certain criteria." },
    "ServerSandboxExists": { "prefix":  "ServerSandboxExists","body":  "ServerSandboxExists( ${1:sSandboxName} )", "description":  "ServerSandboxExists tests for the existence of the passed sandbox. 1 is returned when the passed sandbox exists" },
    "ServerSandboxGet": { "prefix":  "ServerSandboxGet","body":  "ServerSandboxGet( ${1:nIndex} )", "description":  "ServerSandboxGet returns the name of the sandbox identified by the number N" },
    "ServerSandboxListCountGet": { "prefix":  "ServerSandboxListCountGet","body":  "ServerSandboxListCountGet( ${1:sUserName} )", "description":  "ServerSandboxListCountGet returns the count of sandboxes as a number." },
    "ServerSandboxMerge": { "prefix":  "ServerSandboxMerge","body":  "ServerSandboxMerge( ${1:sSourceSandboxName}, ${2:sDestSandboxName}, ${3:bConflictResolution}, ${4:bWaitForLocks} )", "description":  "ServerSandboxMerge merges a source sandbox into an existing target sandbox. If the target sandbox is not specified" },
    "ServerShutdown": { "prefix":  "ServerShutdown","body":  "ServerShutDown( ${1:bSaveData} )", "description":  "ServerShutdown shuts down a server running as an application. ServerShutdown cannot be used to shut down a server running as a Windows service." },
    "SetChoreVerboseMessages": { "prefix":  "SetChoreVerboseMessages","body":  "SetChoreVerboseMessages( ${1:bEnable} )", "description":  "SetChoreVerboseMessages is used to turn on (or off) more verbose reporting of messages to the Tm1s.log file. You can use this function to debug chores in which several processes call each other with the ExecuteProcess function." },
    "SetDimensionGroupsSecurity": { "prefix":  "SetDimensionGroupsSecurity","body":  "SetDimensionGroupsSecurity( ${1:sSecurityLevel}, ${2:sDimName} )", "description":  "SetDimensionGroupsSecurity sets the security level for all existing groups for the specified dimension." },
    "SetElementGroupsSecurity": { "prefix":  "SetElementGroupsSecurity","body":  "SetElementGroupsSecurity( ${1:sSecurityLevel}, ${2:sDimName}, ${3:sElemID} )", "description":  "SetElementGroupsSecurity sets the security level for a specified element in a dimension." },
    "SetHierarchyElementGroupsSecurity": { "prefix":  "SetHierarchyElementGroupsSecurity","body":  "SetHierarchyElementGroupsSecurity( ${1:sSecurityLevel}, ${2:sDimName}, ${3:sHierName}, ${4:sElemID} )", "description":  "SetHierarchyElementGroupsSecurity sets the security level for a specified element from a hierarchy in a dimension." },
    "SetHierarchyGroupsSecurity": { "prefix":  "SetHierarchyGroupsSecurity","body":  "SetHierarchyGroupsSecurity( ${1:sSecurityLevel}, ${2:sDimName}, ${3:sHierName} )", "description":  "SetHierarchyGroupsSecurity sets the security level for all existing groups for the specified dimension hierarchy." },
    "SetInputCharacterSet": { "prefix":  "SetInputCharacterSet","body":  "SetInputCharacterSet( ${1:sCharacterSet} )", "description":  "SetInputCharacterSet function lets you specify the character set used in a TurboIntegrator data source." },
    "SetODBCUnicodeInterface": { "prefix":  "SetODBCUnicodeInterface","body":  "SetODBCUnicodeInterface = ${1:bEnable}", "description":  "SetODBCUnicodeInterface sets whether the ODBC interface should use the Unicode wide functions or the regular single-byte character functions. Setting this function to 1 uses the wide character ODBC interface." },
    "SetOutputCharacterSet": { "prefix":  "SetOutputCharacterSet","body":  "SetOutputCharacterSet( ${1:sFileName}, ${2:sCharacterSet} )", "description":  "SetOutputCharacterSet lets you specify the character set to be used when writing to a text file using TextOutput in a TurboIntegrator proces." },
    "SetOutputEscapeDoubleQuote": { "prefix":  "SetOutputEscapeDoubleQuote","body":  "SetOutputEscapeDoubleQuote( ${1:sFileName}, ${2:bNumber} )", "description":  "SetOutputEscapeDoubleQuote allows you to escape double quotes that appear in element names or data values when exporting a cube view to a .csv file." },
    "SetUseActiveSandboxProperty": { "prefix":  "SetUseActiveSandboxProperty","body":  "SetUseActiveSandboxProperty( ${1:bProperty} )", "description":  "SetUseActiveSandboxProperty controls whether a process reads and writes cube data to the base data or to the user's active sandbox. The default is for processes to read and write to the base data." },
    "StringGlobalVariable": { "prefix":  "StringGlobalVariable","body":  "StringGlobalVariable( ${1:sVariableName} )", "description":  "Use this function to define a string global variable." },
    "StringToNumber": { "prefix":  "StringToNumber","body":  "StringToNumber( ${1:sConvertValue} )", "description":  "StringToNumber converts a string to a number" },
    "StringToNumberEx": { "prefix":  "StringToNumberEx","body":  "StringToNumberEx( ${1:sConvertValue}, ${2:sDecimalSep}, ${3:sThousandsSep} )", "description":  "StringToNumberEx converts a string to a number" },
    "SubsetAliasSet": { "prefix":  "SubsetAliasSet","body":  "SubsetAliasSet( ${1:sDimName}, ${2:sSubsetName}, ${3:sAliasName} )", "description":  "SubsetAliasSet sets the alias attribute to be used in a subset. SubsetAliasSet returns 1 if successful" },
    "SubsetAttrDelete": { "prefix":  "SubsetAttrDelete","body":  "SubsetAttrDelete( ${1:sDimName}, ${2:sAttrName} )", "description":  "SubsetAttrDelete deletes a subset attribute from the TM1 database." },
    "SubsetAttrInsert": { "prefix":  "SubsetAttrInsert","body":  "SubsetAttrInsert( ${1:sDimName}, ${2:sInsertAfterAttrName}, ${3:sAttrName}, ${4:sAttrType} )", "description":  "SubsetAttrInsert creates a new attribute for subsets on your TM1 server. The function creates a string" },
    "SubsetATTRN": { "prefix":  "SubsetATTRN","body":  "SubsetAttrN( ${1:sDimName}, ${2:sSubsetName}, ${3:sAttrName} )", "description":  "SubsetATTRN returns a numeric attribute for a specified subset." },
    "SubsetATTRNL": { "prefix":  "SubsetATTRNL","body":  "SubsetAttrNL( ${1:sDimName}, ${2:sSubsetName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "SubsetATTRNL returns an attribute's numeric value for a specified subset with respect to a given locale." },
    "SubsetAttrPutN": { "prefix":  "SubsetAttrPutN","body":  "SubsetAttrPutN( ${1:nAttrValue}, ${2:sDimName}, ${3:sSubsetName}, ${4:sAttrName}, ${5:[LocalLangCode]} )", "description":  "SubsetAttrPutN assigns a numeric value to an attribute for a specified subset." },
    "SubsetAttrPutS": { "prefix":  "SubsetAttrPutS","body":  "SubsetAttrPutS( ${1:sAttrValue}, ${2:sDimName}, ${3:sSubsetName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "SubsetAttrPutS assigns a string value to an attribute for a specified subset." },
    "SubsetATTRS": { "prefix":  "SubsetATTRS","body":  "SubsetAttrS( ${1:sDimName}, ${2:sSubsetName}, ${3:sAttrName} )", "description":  "SubsetATTRS returns a string attribute for a specified subset." },
    "SubsetATTRSL": { "prefix":  "SubsetATTRSL","body":  "SubsetAttrSL( ${1:sDimName}, ${2:sSubsetName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "SubsetATTRSL returns an attribute's string value for a specified subset with respect to a given locale." },
    "SubsetCreate": { "prefix":  "SubsetCreate","body":  "SubsetCreate( ${1:sDimName}, ${2:sSubsetName}, ${3:[bAsTemporary]} )", "description":  "SubsetCreate creates an empty public subset of a specified dimension." },
    "SubsetCreateByMDX": { "prefix":  "SubsetCreateByMDX","body":  "SubsetCreatebyMDX( ${1:sSubsetName}, ${2:sMDX}, ${3:sDimName}, ${4:[bAsTemporary]} )", "description":  "SubsetCreateByMDX creates a public subset based on a passed MDX expression." },
    "SubsetDeleteAllElements": { "prefix":  "SubsetDeleteAllElements","body":  "SubsetDeleteAllElements( ${1:sDimName}, ${2:sSubsetName} )", "description":  "SubsetDeleteAllElements deletes all elements from a public subset." },
    "SubsetDestroy": { "prefix":  "SubsetDestroy","body":  "SubsetDestroy( ${1:sDimName}, ${2:sSubsetName} )", "description":  "SubsetDestroy deletes a subset from the TM1 database." },
    "SubsetElementDelete": { "prefix":  "SubsetElementDelete","body":  "SubsetElementDelete( ${1:sDimName}, ${2:sSubsetName}, ${3:nIndex} )", "description":  "SubsetElementDelete deletes an element from a subset." },
    "SubsetElementExists": { "prefix":  "SubsetElementExists","body":  "SubsetElementExists( ${1:sDimName}, ${2:sSubsetName}, ${3:sElemID} )", "description":  "SubsetElementExists determines whether a specific element exists within a specific public subset on the server from which a TurboIntegrator process is executed. SubsetElementExists cannot be used to determine if an element exists in a private subset." },
    "SubsetElementGetIndex": { "prefix":  "SubsetElementGetIndex","body":  "SubsetElementGetIndex( ${1:sDimName}, ${2:sSubsetName}, ${3:sElemID}, ${4:nStartIndex} )", "description":  "SubsetElementGetIndex retrieves the index of an element in a subset. The function returns the index of the first occurrence of the specified element." },
    "SubsetElementInsert": { "prefix":  "SubsetElementInsert","body":  "SubsetElementInsert( ${1:sDimName}, ${2:sSubsetName}, ${3:sElemID}, ${4:nIndex} )", "description":  "SubsetElementInsert adds an element to an existing subset." },
    "SubsetExists": { "prefix":  "SubsetExists","body":  "SubsetExists( ${1:sDimName}, ${2:sSubsetName} )", "description":  "SubsetExists determines whether a specific public subset exists on the server from which a TurboIntegrator process is executed." },
    "SubsetExpandAboveSet": { "prefix":  "SubsetExpandAboveSet","body":  "SubsetExpandAboveSet( ${1:sDimName}, ${2:sSubsetName}, ${3:bExpandAbove} )", "description":  "SubsetExpandAboveSet sets the Expand Above property for a subset. The function returns 1 if successful" },
    "SubsetFormatStyleSet": { "prefix":  "SubsetFormatStyleSet","body":  "SubsetFormatStyleSet( ${1:sDimName}, ${2:sSubsetName}, ${3:sFormatName} )", "description":  "SubsetFormatStyleSet applies an existing display style to a named subset." },
    "SubsetGetElementName": { "prefix":  "SubsetGetElementName","body":  "SubsetGetElementName( ${1:sDimName}, ${2:sSubsetName}, ${3:nElemIndex} )", "description":  "SubsetGetElementName returns the name of the element at a specified index location within a given subset." },
    "SubsetGetSize": { "prefix":  "SubsetGetSize","body":  "SubsetGetSize( ${1:sDimName}, ${2:sSubsetName} )", "description":  "SubsetGetSize returns the number of elements in a subset." },
    "SubsetIsAllSet": { "prefix":  "SubsetIsAllSet","body":  "SubsetIsAllSet( ${1:sDimName}, ${2:sSubsetName}, ${3:bAllSet} )", "description":  "SubsetIsAllSet sets a subset to use all elements of the parent dimension. SubsetIsAllSet returns 1 if successful" },
    "SubsetMDXGet": { "prefix":  "SubsetMDXGet","body":  "SubsetMDXGet( ${1:sDimName}, ${2:sSubsetName} )", "description":  "SubsetMDXGet retrieves the MDX expression used to create a subset." },
    "SubsetMDXSet": { "prefix":  "SubsetMDXSet","body":  "SubsetMDXSet( ${1:sDimName}, ${2:sSubsetName}, ${3:[sMDX]} )", "description":  "SubsetMDXSet applies a specified MDX expression to an existing public subset." },
    "SValue": { "prefix":  "SValue","body":  "SValue", "description":  "When the DatasourceType is 'VIEW'" },
    "Synchronized": { "prefix":  "Synchronized","body":  "Synchronized( ${1:sLockName} )", "description":  "Synchronized is used in a TurboIntegrator script to force serial execution of a designated set of TurboIntegrator processes." },
    "TextOutput": { "prefix":  "TextOutput","body":  "TextOutput( ${1:sFileName}, ${2:sString1}, ${3:[sString2]}, ${4:[...]} )", "description":  "TextOutput writes a comma-delimited record to a text file." },
    "TM1User": { "prefix":  "TM1User","body":  "TM1User()", "description":  "TM1User returns a string giving the current TM1 client. When executed in a process that the user is running directly" },
    "Value_Is_String": { "prefix":  "Value_Is_String","body":  "Value_Is_String", "description":  "When the DatasourceType is 'VIEW'" },
    "ViewAttrDelete": { "prefix":  "ViewAttrDelete","body":  "ViewAttrDelete( ${1:sCubeName}, ${2:sAttrName} )", "description":  "ViewAttrDelete deletes a view attribute for a specific cube from the TM1 database." },
    "ViewAttrInsert": { "prefix":  "ViewAttrInsert","body":  "ViewAttrInsert( ${1:sCubeName}, ${2:sInsertAfterAttrName}, ${3:sAttrName}, ${4:sAttrType} )", "description":  "ViewAttrInsert creates a new attribute for views of a specific cube on your TM1 server. The function can create a string" },
    "ViewAttrN": { "prefix":  "ViewAttrN","body":  "ViewAttrN( ${1:sCubeName}, ${2:sViewName}, ${3:sAttrName} )", "description":  "ViewAttrN returns a numeric attribute for a specified view." },
    "ViewAttrNL": { "prefix":  "ViewAttrNL","body":  "ViewAttrNL( ${1:sCubeName}, ${2:sViewName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ViewAttrNL returns an attribute's numeric value for a specified view with respect to a given locale." },
    "ViewAttrPutN": { "prefix":  "ViewAttrPutN","body":  "ViewAttrPutN( ${1:nAttrValue}, ${2:sCubeName}, ${3:sViewName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "ViewAttrPutN assigns a value to a numeric view attribute." },
    "ViewAttrPutS": { "prefix":  "ViewAttrPutS","body":  "ViewAttrPutS( ${1:sAttrValue}, ${2:sCubeName}, ${3:sViewName}, ${4:sAttrName}, ${5:[sLangLocaleCode]} )", "description":  "ViewAttrPutS assigns a string value to an attribute for a specified view." },
    "ViewAttrS": { "prefix":  "ViewAttrS","body":  "ViewAttrS( ${1:sCubeName}, ${2:sViewName}, ${3:sAttrName} )", "description":  "ViewAttrS returns a string attribute for a specified view." },
    "ViewAttrSL": { "prefix":  "ViewAttrSL","body":  "ViewAttrSL( ${1:sCubeName}, ${2:sViewName}, ${3:sAttrName}, ${4:[sLangLocaleCode]} )", "description":  "ViewAttrSL returns an attribute's string value for a specified view with respect to a given locale." },
    "ViewColumnDimensionSet": { "prefix":  "ViewColumnDimensionSet","body":  "ViewColumnDimensionSet( ${1:sCubeName}, ${2:sViewName}, ${3:sDimName}, ${4:nStackPosition} )", "description":  "ViewColumnDimensionSet sets a column dimension for a TM1 view." },
    "ViewColumnSuppressZeroesSet": { "prefix":  "ViewColumnSuppressZeroesSet","body":  "ViewColumnSuppressZeroesSet( ${1:sCubeName}, ${2:sViewName}, ${3:bColumnSuppressZeroes} )", "description":  "ViewColumnSuppressZeroesSet suppresses or enables the display of columns containing only zero values in a TM1 cube view." },
    "ViewConstruct": { "prefix":  "ViewConstruct","body":  "ViewConstruct( ${1:sCubeName}, ${2:sViewName} )", "description":  "ViewConstruct constructs" },
    "ViewCreate": { "prefix":  "ViewCreate","body":  "ViewCreate( ${1:sCubeName}, ${2:sViewName}, ${3:[bAsTemporary]} )", "description":  "ViewCreate creates an empty view of a specified cube." },
    "ViewCreateByMDX": { "prefix":  "ViewCreateByMDX","body":  "ViewCreateByMDX( ${1:sCubeName}, ${2:sViewName}, ${3:sMDX}, ${4:[bAsTemporary]} )", "description":  "ViewCreateByMDX creates a view with a specified MDX expression." },
    "ViewDestroy": { "prefix":  "ViewDestroy","body":  "ViewDestroy( ${1:sCubeName}, ${2:sViewName} )", "description":  "ViewDestroy deletes a view from the TM1 database." },
    "ViewExists": { "prefix":  "ViewExists","body":  "ViewExists( ${1:sCubeName}, ${2:sViewName} )", "description":  "ViewExists determines whether a specific public view exists on the server from which a TurboIntegrator process is executed. The function returns 1 if the view exists on the server" },
    "ViewExtractFilterByTitlesSet": { "prefix":  "ViewExtractFilterByTitlesSet","body":  "ViewExtractFilterByTitlesSet( ${1:sCubeName}, ${2:sViewName}, ${3:sTitles}, ${4:bTemporary} )", "description":  "ViewExtractFilterByTitlesSet sets an option to filter by titles on consolidated values that are excluded from a view or any associated view extracts." },
    "ViewExtractSkipCalcsSet": { "prefix":  "ViewExtractSkipCalcsSet","body":  "ViewExtractSkipCalcsSet( ${1:sCubeName}, ${2:sViewName}, ${3:bSkipCalcs} )", "description":  "ViewExtractSkipCalcsSet sets an option to include/exclude consolidated values in a view and any associated view extracts. A view extract is a TM1 view exported as an ASCII comma-delimited (.cma) file." },
    "ViewExtractSkipConsolidatedStringsSet": { "prefix":  "ViewExtractSkipConsolidatedStringsSet","body":  "ViewExtractSkipConsolidatedStringsSet( ${1:sCubeName}, ${2:sViewName}, ${3:bIncludeStrings} )", "description":  "ViewExtractSkipConsolidatedStringsSet sets an option to exclude strings on consolidated values that are excluded from a view or any associated view extracts. A view extract is a TM1 view exported as an ASCII comma-delimited (.cma) file." },
    "ViewExtractSkipRuleValuesSet": { "prefix":  "ViewExtractSkipRuleValuesSet","body":  "ViewExtractSkipRuleValuesSet( ${1:sCubeName}, ${2:sViewName}, ${3:bSkipRuleValues} )", "description":  "ViewExtractSkipRuleValuesSet sets an option to include/exclude rule-calculated values in a view and any associated view extracts. A view extract is a TM1 view exported as an ASCII comma-delimited (.cma) file." },
    "ViewExtractSkipZeroesSet": { "prefix":  "ViewExtractSkipZeroesSet","body":  "ViewExtractSkipZeroesSet( ${1:sCubeName}, ${2:sViewName}, ${3:bSkipZeroes} )", "description":  "ViewExtractSkipZeroesSet sets an option to include/exclude zero values in a view and any associated view extracts. A view extract is a TM1 view exported as an ASCII comma-delimited (.cma) file." },
    "ViewMDXGet": { "prefix":  "ViewMDXGet","body":  "ViewMDXGet( ${1:sCubeName}, ${2:sViewName} )", "description":  "ViewMDXGet retrieves the MDX expression for an existing MDX view." },
    "ViewMDXSet": { "prefix":  "ViewMDXSet","body":  "ViewMDXSet( ${1:sCubeName}, ${2:sViewName}, ${3:sMDX} )", "description":  "ViewMDXSet sets the MDX expression for an existing MDX view." },
    "ViewRowDimensionSet": { "prefix":  "ViewRowDimensionSet","body":  "ViewRowDimensionSet( ${1:sCubeName}, ${2:sViewName}, ${3:sDimName}, ${4:nStackPosition} )", "description":  "ViewRowDimensionSet sets a row dimension for a TM1 view." },
    "ViewRowSuppressZeroesSet": { "prefix":  "ViewRowSuppressZeroesSet","body":  "ViewRowSuppressZeroesSet( ${1:sCubeName}, ${2:sViewName}, ${3:bRowSuppressZeroes} )", "description":  "ViewRowSuppressZeroesSet suppresses or enables the display of rows containing only zero values in a TM1 cube view." },
    "ViewSubsetAssign": { "prefix":  "ViewSubsetAssign","body":  "ViewSubsetAssign( ${1:sCubeName}, ${2:sViewName}, ${3:sDimName}, ${4:sSubsetName} )", "description":  "ViewSubsetAssign assigns a named subset to a cube view." },
    "ViewSuppressZeroesSet": { "prefix":  "ViewSuppressZeroesSet","body":  "ViewSuppressZeroesSet( ${1:sCubeName}, ${2:sViewName}, ${3:bSuppressZeroes} )", "description":  "ViewSuppressZeroesSet suppresses or enables the display of all rows and columns containing only zero values in a TM1 cube view." },
    "ViewTitleDimensionSet": { "prefix":  "ViewTitleDimensionSet","body":  "ViewTitleDimensionSet( ${1:sCubeName}, ${2:sViewName}, ${3:sDimName} )", "description":  "ViewTitleDimensionSet sets a title dimension for a TM1 view." },
    "ViewTitleElementSet": { "prefix":  "ViewTitleElementSet","body":  "ViewTitleElementSet( ${1:sCubeName}, ${2:sViewName}, ${3:sDimName}, ${4:nIndex} )", "description":  "ViewTitleElementSet sets a title element for a TM1 view. ViewTitleElementSet is used in conjunction with the ViewTitleDimensionSet function." },
    "ViewZeroOut": { "prefix":  "ViewZeroOut","body":  "ViewZeroOut( ${1:sCubeName}, ${2:sViewName} )", "description":  "ViewZeroOut sets all data points in a view to zero." },
    "While": { "prefix":  "While","body":  "While( ${1:Condition} )", "description":  "The While statement allows a process to repeat a series of statements while a given condition is true. While statements can be nested." },
    "WildcardFileSearch": { "prefix":  "WildcardFileSearch","body":  "WildcardFileSearch( ${1:sPathname}, ${2:sPriorFilename} )", "description":  "WildcardFileSearch lets you use wildcard characters to search for files in a specified directory." },
    "ProcessExitByBreak": { "prefix":  "ProcessExitByBreak","body":  "ProcessExitByBreak()", "description":  "Indicates that the process exited because it encountered a ProcessBreak function." },
    "ProcessExitByChoreQuit": { "prefix":  "ProcessExitByChoreQuit","body":  "ProcessExitByChoreQuit()", "description":  "Indicates that the process exited due to execution of the ChoreQuit function." },
    "ProcessExitByChoreRollback": { "prefix":  "ProcessExitByChoreRollback","body":  "ProcessExitByChoreRollback()", "description":  "Indicates that the process exited because it encountered a ChoreRollback function." },
    "ProcessExitByProcessRollback": { "prefix":  "ProcessExitByProcessRollback","body":  "ProcessExitByProcessRollback()", "description":  "Indicates that the process exited because it encountered a ProcessRollback function." },
    "ProcessExitByQuit": { "prefix":  "ProcessExitByQuit","body":  "ProcessExitByQuit()", "description":  "Indicates that the process exited because of an explicit quit command." },
    "ProcessExitMinorError": { "prefix":  "ProcessExitMinorError","body":  "ProcessExitMinorError()", "description":  "Indicates that the process executed successfully but encountered minor errors." },
    "ProcessExitNormal": { "prefix":  "ProcessExitNormal","body":  "ProcessExitNormal()", "description":  "Indicates that the process executed normally." },
    "ProcessExitOnInit": { "prefix":  "ProcessExitOnInit","body":  "ProcessExitOnInit()", "description":  "Indicates that the process aborted during initialization." },
    "ProcessExitSeriousError": { "prefix":  "ProcessExitSeriousError","body":  "ProcessExitSeriousError()", "description":  "Indicates that the process exited because of a serious error." },
    "ProcessExitWithMessage": { "prefix":  "ProcessExitWithMessage","body":  "ProcessExitWithMessage()", "description":  "Indicates that the process exited normally with a message written to tm1server.log." },
    "ATTRN": { "prefix":  "ATTRN","body":  "ATTRN( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName} )", "description":  "ATTRN returns a numeric attribute for a specified element of a dimension." },
    "ATTRS": { "prefix":  "ATTRS","body":  "ATTRS( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName} )", "description":  "ATTRS returns a string attribute for a specified element of a dimension." },
    "CubeATTRN": { "prefix":  "CubeATTRN","body":  "CubeATTRN( ${1:sCubeName}, ${2:sAttrName} )", "description":  "CubeATTRN returns a numeric attribute for a specified cube." },
    "CubeATTRS": { "prefix":  "CubeATTRS","body":  "CubeATTRS( ${1:sCubeName}, ${2:sAttrName} )", "description":  "CubeATTRS returns a string attribute for a specified cube." },
    "DimensionATTRN": { "prefix":  "DimensionATTRN","body":  "DimensionAttrN( ${1:sDimName}, ${2:sAttrName} )", "description":  "DimensionATTRN returns a numeric attribute for a specified dimension." },
    "DimensionATTRS": { "prefix":  "DimensionATTRS","body":  "DimensionAttrS( ${1:sDimName}, ${2:sAttrName} )", "description":  "DimensionATTRS returns a string attribute for a specified dimension." },
    "ElementAttrN": { "prefix":  "ElementAttrN","body":  "ElementAttrN( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName} )", "description":  "ElementAttrN returns a numeric attribute for a specified element of a dimension." },
    "ElementAttrS": { "prefix":  "ElementAttrS","body":  "ElementAttrS( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName} )", "description":  "ElementAttrS returns a string attribute for a specified element of a dimension." },
    "ConsolidatedAvg": { "prefix":  "ConsolidatedAvg","body":  "ConsolidatedAvg( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedAvg calculates the average value in a consolidation and returns that single value." },
    "ConsolidateChildren": { "prefix":  "ConsolidateChildren","body":  "ConsolidateChildren( ${1:sDimName1}, ${2:[sDimName2}, ${3:...]} )", "description":  "ConsolidateChildren forces consolidated values to be calculated by summing immediate children along a specified dimension. ConsolidateChildren is useful when intermediate consolidations are calculated by rules and you want a parent consolidation to be calculated by summing the intermediate consolidations rather than by summing the underlying leaf values." },
    "ConsolidatedCount": { "prefix":  "ConsolidatedCount","body":  "ConsolidatedCount( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedCount returns the number of values in a consolidation." },
    "ConsolidatedCountUnique": { "prefix":  "ConsolidatedCountUnique","body":  "ConsolidatedCountUnique( ${1:0}, ${2:unique-along-dimension}, ${3:sCubeName}, ${4:sElemID1}, ${5:sElemID2}, ${6:...} )", "description":  "ConsolidatedCountUnique counts the number of unique elements for which data points actually exist for the specified consolidation. The unique elements are counted along one dimension of the consolidated cell." },
    "ConsolidatedMax": { "prefix":  "ConsolidatedMax","body":  "ConsolidatedMax( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedMax calculates the maximum value in a consolidation and returns that single value." },
    "ConsolidatedMin": { "prefix":  "ConsolidatedMin","body":  "ConsolidatedMin( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedMin calculates the minimum value in a consolidation and returns that single value." },
    "DB": { "prefix":  "DB","body":  "DB( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...sElemID256]} )", "description":  "DB returns a value from a cube in a TM1 database. DB returns a numeric value if used in a numeric expression and a string value if used in a string expression." },
    "ISLEAF": { "prefix":  "ISLEAF","body":  "ISLEAF()", "description":  "ISLEAF returns 1 if a specified cell is a leaf cell (identified solely by leaf/simple elements). If the specified cell is identified by any consolidated elements, the function returns 0." },
    "ISUNDEFINEDCELLVALUE": { "prefix":  "ISUNDEFINEDCELLVALUE","body":  "ISUNDEFINEDCELLVALUE( ${1:nTestValue}, ${2:[sCubeName]} )", "description":  "ISUNDEFINEDCELLVALUE compares the passed value to the default numeric cube value, which is influenced by the presence of the UNDEFVALS declaration in that cube's rule. The function returns 1 if the passed value equals the cube's default value, otherwise the function returns 0." },
    "UNDEF": { "prefix":  "UNDEF","body":  "UNDEF()", "description":  "UNDEF returns the undefined value. This function can be used to prevent datafrom being stored in a cube based on a logical test." },
    "UNDEFINEDCELLVALUE": { "prefix":  "UNDEFINEDCELLVALUE","body":  "UNDEFINEDCELLVALUE( ${1:[sCubeName]} )", "description":  "UNDEFINEDCELLVALUE returns the default numeric cube value, which is influenced by the presence of the UNDEFVALS declaration in that cube's rule." },
    "UNDEFVALS": { "prefix":  "UNDEFVALS","body":  "UNDEFVALS", "description":  "Putting UNDEFVALS in the rules for a cube changes the default value for the cube from zero to a special undefined value. Like other rules functions, UNDEFVALS applies only to the cube associated with the rule in which the function appears." },
    "DATE": { "prefix":  "DATE","body":  "DATE( ${1:nSerialDate}, ${2:bReturnFourDigitYear} )", "description":  "DATE returns the date string in yy-mm-dd or yyyy-mm-dd format for a given serial number." },
    "DATES": { "prefix":  "DATES","body":  "DATES( ${1:nYear}, ${2:nMonth}, ${3:nDay} )", "description":  "DATES returns a date string, in the form 'yy-mm-dd' or 'yyyy-mm-dd', corresponding to a given year, month, and day." },
    "DAY": { "prefix":  "DAY","body":  "DAY( ${1:sFormattedDate} )", "description":  "DAY returns a numeric value for the day in a given date string." },
    "DAYNO": { "prefix":  "DAYNO","body":  "DAYNO( ${1:sFormattedDate} )", "description":  "DAYNO returns the serial date number corresponding to a given date string." },
    "MONTH": { "prefix":  "MONTH","body":  "MONTH( ${1:sFormattedDate} )", "description":  "MONTH returns a numeric value for the month in a given date string." },
    "NOW": { "prefix":  "NOW","body":  "NOW()", "description":  "NOW returns the current date/time value in serial number format." },
    "TIME": { "prefix":  "TIME","body":  "TIME()", "description":  "TIME returns a string, in HH:MM format, representing the system time on the TM1 server." },
    "TIMST": { "prefix":  "TIMST","body":  "TIMST( ${1:nSerialDate}, ${2:sFormat}, ${3:bExtendedYears} )", "description":  "TIMST returns a formatted date/time string." },
    "TIMVL": { "prefix":  "TIMVL","body":  "TIMVL( ${1:nSerialDate}, ${2:sExtractType}, ${3:bExtendedYears} )", "description":  "TIMVL returns the numeric value of a component (year, month, etc.) of a date/time value." },
    "TODAY": { "prefix":  "TODAY","body":  "TODAY( ${1:[bReturnFourDigitYear]} )", "description":  "TODAY returns the current date in yy-mm-dd format." },
    "YEAR": { "prefix":  "YEAR","body":  "YEAR( ${1:sFormattedDate} )", "description":  "YEAR returns a numeric value for the year in a given date string." },
    "DIMIX": { "prefix":  "DIMIX","body":  "DIMIX( ${1:sDimName}, ${2:sElemID} )", "description":  "DIMIX returns the index number of an element within a dimension." },
    "DIMNM": { "prefix":  "DIMNM","body":  "DIMNM( ${1:sDimName}, ${2:nIndex} )", "description":  "DIMNM returns the element of a dimension that corresponds to the index argument." },
    "DIMSIZ": { "prefix":  "DIMSIZ","body":  "DIMSIZ( ${1:sDimName} )", "description":  "DIMSIZ returns the number of elements within a specified dimension." },
    "DNEXT": { "prefix":  "DNEXT","body":  "DNEXT( ${1:sDimName}, ${2:sElemID} )", "description":  "DNEXT returns the element name that follows the element specified as an argument to the function." },
    "DNLEV": { "prefix":  "DNLEV","body":  "DNLEV( ${1:sDimName} )", "description":  "DNLEV returns the number levels in a dimension." },
    "DTYPE": { "prefix":  "DTYPE","body":  "DTYPE( ${1:sDimName}, ${2:sElemID} )", "description":  "DTYPE returns information about the element type of a specified element. DTYPE returns N if the element is a numeric element, S if the element is a string element, and C if the element is a consolidated element." },
    "TABDIM": { "prefix":  "TABDIM","body":  "TABDIM( ${1:sCubeName}, ${2:nIndex} )", "description":  "TABDIM returns the dimension name that corresponds to the index argument." },
    "ELCOMP": { "prefix":  "ELCOMP","body":  "ELCOMP( ${1:sDimName}, ${2:sParentElemID}, ${3:nPosition} )", "description":  "ELCOMP returns the name of a child of a consolidated element in a specified dimension." },
    "ELCOMPN": { "prefix":  "ELCOMPN","body":  "ELCOMPN( ${1:sDimName}, ${2:sParentElemID} )", "description":  "ELCOMPN returns the number of components in a specified element. If the element argument is not a consolidated element, the function returns 0." },
    "ElementComponent": { "prefix":  "ElementComponent","body":  "ElementComponent( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:nPosition} )", "description":  "ElementComponent returns the name of a child of a consolidated element in a specified dimension. If the element argument is not a consolidated element, the function returns 0." },
    "ElementComponentCount": { "prefix":  "ElementComponentCount","body":  "ElementComponentCount( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID} )", "description":  "ElementComponentCount returns the number of components in a specified element. If the element argument is not a consolidated element, the function returns 0." },
    "ElementCount": { "prefix":  "ElementCount","body":  "ElementCount( ${1:sDimName}, ${2:sHierName} )", "description":  "ElementCount returns the number of elements within a specified dimension." },
    "ElementFirst": { "prefix":  "ElementFirst","body":  "ElementFirst( ${1:sDimName}, ${2:sHierName} )", "description":  "ElementFirst returns the first element of a specified dimension." },
    "ElementIndex": { "prefix":  "ElementIndex","body":  "ElementIndex( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementIndex returns the index number of an element within a dimension." },
    "ElementIsAncestor": { "prefix":  "ElementIsAncestor","body":  "ElementIsAncestor( ${1:sDimName}, ${2:sHierName}, ${3:sAncestorElemID}, ${4:sDescendantElemID} )", "description":  "ElementIsAncestor determines whether element1 is an ancestor of element2 in the specified dimension. The function returns 1 if element1 is an ancestor of element2, otherwise the function returns 0." },
    "ElementIsComponent": { "prefix":  "ElementIsComponent","body":  "ElementIsComponent( ${1:sDimName}, ${2:sHierName}, ${3:sChildElemID}, ${4:sParentElemID} )", "description":  "ElementIsComponent determines whether element1 is a child of element2 in the specified dimension. The function returns 1 if element1 is a child of element2, otherwise the function returns 0." },
    "ElementIsParent": { "prefix":  "ElementIsParent","body":  "ElementIsParent( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "ElementIsParent determines whether element1 is a parent of element2 in the specified dimension. The function returns 1 if element1 is a parent of element2, otherwise the function returns 0." },
    "ElementLevel": { "prefix":  "ElementLevel","body":  "ElementLevel( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementLevel returns the level of an element within a dimension." },
    "ElementName": { "prefix":  "ElementName","body":  "ElementName( ${1:sDimName}, ${2:sHierName}, ${3:nIndex} )", "description":  "ElementName returns the element of a dimension that corresponds to the index argument." },
    "ElementNext": { "prefix":  "ElementNext","body":  "ElementNext( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementNext returns the element name that follows the element specified as an argument to the function." },
    "ElementParent": { "prefix":  "ElementParent","body":  "ElementParent( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:nIndex} )", "description":  "ElementParent returns the parent of an element in a specified dimension." },
    "ElementParentCount": { "prefix":  "ElementParentCount","body":  "ElementParentCount( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementParentCount returns the number of parents of an element in a specified dimension." },
    "ElementType": { "prefix":  "ElementType","body":  "ElementType( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementType returns information about the element type of a specified element. ElementType returns N if the element is a numeric element, S if the element is a string element, and C if the element is a consolidated element." },
    "ElementWeight": { "prefix":  "ElementWeight","body":  "ElementWeight( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "ElementWeight returns the weight of a child in a consolidated element." },
    "ELISANC": { "prefix":  "ELISANC","body":  "ELISANC( ${1:sDimName}, ${2:sAncestorElemID}, ${3:sDescendantElemID} )", "description":  "ELISANC determines whether element1 is an ancestor of element2 in the specified dimension. The function returns 1 if element1 is an ancestor of element2, otherwise the function returns 0." },
    "ELISCOMP": { "prefix":  "ELISCOMP","body":  "ELISCOMP( ${1:sDimName}, ${2:sChildElemID}, ${3:sParentElemID} )", "description":  "ELISCOMP determines whether element1 is a child of element2 in the specified dimension. The function returns 1 if element1 is a child of element2, otherwise the function returns 0." },
    "ELISPAR": { "prefix":  "ELISPAR","body":  "ELISPAR( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "ELISPAR determines whether element1 is a parent of element2 in the specified dimension. The function returns 1 if element1 is a parent of element2, otherwise the function returns 0." },
    "ELLEV": { "prefix":  "ELLEV","body":  "ELLEV( ${1:sDimName}, ${2:sElemID} )", "description":  "ELLEV returns the level of an element within a dimension." },
    "ELPAR": { "prefix":  "ELPAR","body":  "ELPAR( ${1:sDimName}, ${2:sElemID}, ${3:nIndex} )", "description":  "ELPAR returns the parent of an element in a specified dimension." },
    "ELPARN": { "prefix":  "ELPARN","body":  "ELPARN( ${1:sDimName}, ${2:sElemID} )", "description":  "ELPARN returns the number of parents of an element in a specified dimension." },
    "ELWEIGHT": { "prefix":  "ELWEIGHT","body":  "ELWEIGHT( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "ELWEIGHT returns the weight of a child in a consolidated element." },
    "LevelCount": { "prefix":  "LevelCount","body":  "LevelCount( ${1:sDimName}, ${2:sHierName} )", "description":  "LevelCount returns the number levels in a dimension." },
    "FV": { "prefix":  "FV","body":  "FV( ${1:nPayment}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "FV returns the value of an annuity at the time of the last payment. An annuity is a series of payments made at equal intervals of time. Payments are assumed to be made at the end of each period." },
    "PAYMT": { "prefix":  "PAYMT","body":  "PAYMT( ${1:nPrincipal}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "PAYMT returns the payment amount of an annuity based on a given initial value or principal, an interest rate, and a number of periods. An annuity is a series of payments made at equal intervals of time." },
    "PV": { "prefix":  "PV","body":  "PV( ${1:nPayment}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "PV returns the initial or principal value of an annuity." },
    "RAND": { "prefix":  "RAND","body":  "RAND()", "description":  "RAND generates a random number that is uniformly distributed between 0 and 1. The random number generator is seeded when TM1 is loaded." },
    "ABS": { "prefix":  "ABS","body":  "ABS( ${1:nNumber} )", "description":  "ABS returns the absolute value of a number." },
    "ACOS": { "prefix":  "ACOS","body":  "ACOS( ${1:nNumber} )", "description":  "ACOS returns the angle, in radians, whose cosine is x." },
    "ASIN": { "prefix":  "ASIN","body":  "ASIN( ${1:nNumber} )", "description":  "ASIN returns the angle, in radians, whose sine is x." },
    "ATAN": { "prefix":  "ATAN","body":  "ATAN( ${1:nNumber} )", "description":  "ATAN returns the angle, in radians, whose tangent is x. The result is between -pi/2 and +pi/2." },
    "COS": { "prefix":  "COS","body":  "COS( ${1:nNumber} )", "description":  "COS returns the cosine of an angle expressed in radians." },
    "EXP": { "prefix":  "EXP","body":  "EXP( ${1:nNumber} )", "description":  "EXP returns the natural anti-log of a number." },
    "INT": { "prefix":  "INT","body":  "INT( ${1:nNumber} )", "description":  "INT returns the largest integer that is less than or equal to a specified value." },
    "ISUND": { "prefix":  "ISUND","body":  "ISUND( ${1:nNumber} )", "description":  "ISUND returns 1 if a specified value is undefined; otherwise it returns 0." },
    "LN": { "prefix":  "LN","body":  "LN( ${1:nNumber} )", "description":  "LN returns the natural logarithm (base e) of a number." },
    "LOG": { "prefix":  "LOG","body":  "LOG( ${1:nNumber} )", "description":  "LOG returns the base 10 logarithm of a positive number." },
    "MAX": { "prefix":  "MAX","body":  "MAX( ${1:nNumber1}, ${2:nNumber2} )", "description":  "MAX returns the largest number in a pair of values." },
    "MIN": { "prefix":  "MIN","body":  "MIN( ${1:nNumber1}, ${2:nNumber2} )", "description":  "MIN returns the smallest number in a pair of values." },
    "MOD": { "prefix":  "MOD","body":  "MOD( ${1:nDividend}, ${2:nDivisor} )", "description":  "MOD returns the remainder of dividing a number by a divisor." },
    "ROUND": { "prefix":  "ROUND","body":  "ROUND( ${1:nNumber} )", "description":  "ROUND rounds a given number to the nearest integer. Rounding can be done in a variety of valid ways." },
    "ROUNDP": { "prefix":  "ROUNDP","body":  "ROUNDP( ${1:nNumber}, ${2:nDecimalPrecision} )", "description":  "ROUNDP rounds a given number at a specified decimal precision." },
    "SIGN": { "prefix":  "SIGN","body":  "SIGN( ${1:nNumber} )", "description":  "SIGN determines if a number is positive, negative, or zero. The function returns 1 if the number is positive, -1 if the number is negative, and 0 if the number is zero." },
    "SIN": { "prefix":  "SIN","body":  "SIN( ${1:nNumber} )", "description":  "SIN returns the sine of a given angle." },
    "SQRT": { "prefix":  "SQRT","body":  "SQRT( ${1:nNumber} )", "description":  "SQRT returns the square root of a given value." },
    "TAN": { "prefix":  "TAN","body":  "TAN( ${1:nNumber} )", "description":  "TAN returns the tangent of a given angle." },
    "CAPIT": { "prefix":  "CAPIT","body":  "CAPIT( ${1:sString} )", "description":  "CAPIT applies initial capitalization to every word in a string." },
    "CHAR": { "prefix":  "CHAR","body":  "CHAR( ${1:nAsciiCode} )", "description":  "CHAR returns the character identified by a given ASCII numeric code." },
    "CODE": { "prefix":  "CODE","body":  "CODE( ${1:sChar}, ${2:nCharLocation} )", "description":  "CODE returns the ASCII numeric code for a specified character within a string." },
    "DELET": { "prefix":  "DELET","body":  "DELET( ${1:sDeleteFrom}, ${2:nStart}, ${3:nDeleteCount} )", "description":  "DELET returns the result of deleting a specified number of characters from a specified starting point within a string." },
    "FILL": { "prefix":  "FILL","body":  "FILL( ${1:sFiller}, ${2:nLength} )", "description":  "FILL repeats a given string as necessary to return a string of a specified length." },
    "INSRT": { "prefix":  "INSRT","body":  "INSRT( ${1:sStringToInsert}, ${2:sBaseString}, ${3:nLocation} )", "description":  "INSRT inserts one string into another string at a specified insertion point." },
    "LONG": { "prefix":  "LONG","body":  "LONG( ${1:sString} )", "description":  "LONG returns the length of a string." },
    "LOWER": { "prefix":  "LOWER","body":  "LOWER( ${1:sString} )", "description":  "LOWER converts all upper case characters in a string to lower case." },
    "NUMBR": { "prefix":  "NUMBR","body":  "NUMBR( ${1:sString} )", "description":  "NUMBR converts a string to a number. The string passed to the NUMBR function must use. (period) as the decimal separator and , (comma) as the thousand separator. Any other decimal/thousand separators will cause incorrect results." },
    "SCAN": { "prefix":  "SCAN","body":  "SCAN( ${1:sFindString}, ${2:sWithinString} )", "description":  "SCAN returns a number indicating the starting location of the first occurrence of a specified substring within a string. If the substring does not occur in the given string, the function returns 0." },
    "STR": { "prefix":  "STR","body":  "STR( ${1:nNumber}, ${2:nTotalLength}, ${3:nDecimalPlaces} )", "description":  "STR converts a number to a string." },
    "SUBST": { "prefix":  "SUBST","body":  "SUBST( ${1:sString}, ${2:nBeginning}, ${3:nLength} )", "description":  "SUBST returns a substring of a given string." },
    "TRIM": { "prefix":  "TRIM","body":  "TRIM( ${1:sString} )", "description":  "TRIM returns the result of trimming any leading and trailing blanks from a string." },
    "UPPER": { "prefix":  "UPPER","body":  "UPPER( ${1:sString} )", "description":  "UPPER converts a text string to upper case." }
}