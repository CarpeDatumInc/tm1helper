{
    "ATTRN": { "prefix":  "ATTRN","body":  "ATTRN( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName} )", "description":  "ATTRN returns a numeric attribute for a specified element of a dimension." },
    "ATTRS": { "prefix":  "ATTRS","body":  "ATTRS( ${1:sDimName}, ${2:sElemID}, ${3:sAttrName} )", "description":  "ATTRS returns a string attribute for a specified element of a dimension." },
    "CubeATTRN": { "prefix":  "CubeATTRN","body":  "CubeATTRN( ${1:sCubeName}, ${2:sAttrName} )", "description":  "CubeATTRN returns a numeric attribute for a specified cube." },
    "CubeATTRS": { "prefix":  "CubeATTRS","body":  "CubeATTRS( ${1:sCubeName}, ${2:sAttrName} )", "description":  "CubeATTRS returns a string attribute for a specified cube." },
    "DimensionATTRN": { "prefix":  "DimensionATTRN","body":  "DimensionAttrN( ${1:sDimName}, ${2:sAttrName} )", "description":  "DimensionATTRN returns a numeric attribute for a specified dimension." },
    "DimensionATTRS": { "prefix":  "DimensionATTRS","body":  "DimensionAttrS( ${1:sDimName}, ${2:sAttrName} )", "description":  "DimensionATTRS returns a string attribute for a specified dimension." },
    "ElementAttrN": { "prefix":  "ElementAttrN","body":  "ElementAttrN( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName} )", "description":  "ElementAttrN returns a numeric attribute for a specified element of a dimension." },
    "ElementAttrS": { "prefix":  "ElementAttrS","body":  "ElementAttrS( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:sAttrName} )", "description":  "ElementAttrS returns a string attribute for a specified element of a dimension." },
    "ConsolidatedAvg": { "prefix":  "ConsolidatedAvg","body":  "ConsolidatedAvg( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedAvg calculates the average value in a consolidation and returns that single value." },
    "ConsolidateChildren": { "prefix":  "ConsolidateChildren","body":  "ConsolidateChildren( ${1:sDimName1}, ${2:[sDimName2}, ${3:...]} )", "description":  "ConsolidateChildren forces consolidated values to be calculated by summing immediate children along a specified dimension. ConsolidateChildren is useful when intermediate consolidations are calculated by rules and you want a parent consolidation to be calculated by summing the intermediate consolidations rather than by summing the underlying leaf values." },
    "ConsolidatedCount": { "prefix":  "ConsolidatedCount","body":  "ConsolidatedCount( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedCount returns the number of values in a consolidation." },
    "ConsolidatedCountUnique": { "prefix":  "ConsolidatedCountUnique","body":  "ConsolidatedCountUnique( ${1:0}, ${2:unique-along-dimension}, ${3:sCubeName}, ${4:sElemID1}, ${5:sElemID2}, ${6:...} )", "description":  "ConsolidatedCountUnique counts the number of unique elements for which data points actually exist for the specified consolidation. The unique elements are counted along one dimension of the consolidated cell." },
    "ConsolidatedMax": { "prefix":  "ConsolidatedMax","body":  "ConsolidatedMax( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedMax calculates the maximum value in a consolidation and returns that single value." },
    "ConsolidatedMin": { "prefix":  "ConsolidatedMin","body":  "ConsolidatedMin( ${1:nFlagValue}, ${2:sCubeName}, ${3:sElemID1}, ${4:sElemID2}, ${5:...} )", "description":  "ConsolidatedMin calculates the minimum value in a consolidation and returns that single value." },
    "CellValueN": { "prefix":  "CellValueN","body":  "CellValueN( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "CellValueN returns the numeric value of the specified element(s) in a cube. This is a TM1 rules function, valid in TM1 rules only. Use of this function in a TurboIntegrator process will result in an error." },
    "CellValueS": { "prefix":  "CellValueS","body":  "CellValueS( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "CellValueS returns the string value of the specified element(s) in a cube. This is a TM1 rules function, valid in TM1 rules only. Use of this function in a TurboIntegrator process will result in an error." },
    "DB": { "prefix":  "DB","body":  "DB( ${1:sCubeName}, ${2:sElemID1}, ${3:sElemID2}, ${4:[...]} )", "description":  "DB returns a value from a cube in a TM1 database. DB returns a numeric value if used in a numeric expression and a string value if used in a string expression." },
    "ISLEAF": { "prefix":  "ISLEAF","body":  "ISLEAF()", "description":  "ISLEAF returns 1 if a specified cell is a leaf cell (identified solely by leaf/simple elements). If the specified cell is identified by any consolidated elements, the function returns 0." },
    "ISUNDEFINEDCELLVALUE": { "prefix":  "ISUNDEFINEDCELLVALUE","body":  "ISUNDEFINEDCELLVALUE( ${1:nTestValue}, ${2:[sCubeName]} )", "description":  "ISUNDEFINEDCELLVALUE compares the passed value to the default numeric cube value, which is influenced by the presence of the UNDEFVALS declaration in that cube's rule. The function returns 1 if the passed value equals the cube's default value, otherwise the function returns 0." },
    "UNDEF": { "prefix":  "UNDEF","body":  "UNDEF()", "description":  "UNDEF returns the undefined value. This function can be used to prevent datafrom being stored in a cube based on a logical test." },
    "UNDEFINEDCELLVALUE": { "prefix":  "UNDEFINEDCELLVALUE","body":  "UNDEFINEDCELLVALUE( ${1:[sCubeName]} )", "description":  "UNDEFINEDCELLVALUE returns the default numeric cube value, which is influenced by the presence of the UNDEFVALS declaration in that cube's rule." },
    "UNDEFVALS": { "prefix":  "UNDEFVALS","body":  "UNDEFVALS", "description":  "Putting UNDEFVALS in the rules for a cube changes the default value for the cube from zero to a special undefined value. Like other rules functions, UNDEFVALS applies only to the cube associated with the rule in which the function appears." },
    "DATE": { "prefix":  "DATE","body":  "DATE( ${1:nSerialDate}, ${2:bReturnFourDigitYear} )", "description":  "DATE returns the date string in yy-mm-dd or yyyy-mm-dd format for a given serial number." },
    "DATES": { "prefix":  "DATES","body":  "DATES( ${1:nYear}, ${2:nMonth}, ${3:nDay} )", "description":  "DATES returns a date string, in the form 'yy-mm-dd' or 'yyyy-mm-dd', corresponding to a given year, month, and day." },
    "DAY": { "prefix":  "DAY","body":  "DAY( ${1:sFormattedDate} )", "description":  "DAY returns a numeric value for the day in a given date string." },
    "DAYNO": { "prefix":  "DAYNO","body":  "DAYNO( ${1:sFormattedDate} )", "description":  "DAYNO returns the serial date number corresponding to a given date string." },
    "MONTH": { "prefix":  "MONTH","body":  "MONTH( ${1:sFormattedDate} )", "description":  "MONTH returns a numeric value for the month in a given date string." },
    "NOW": { "prefix":  "NOW","body":  "NOW()", "description":  "NOW returns the current date/time value in serial number format." },
    "TIME": { "prefix":  "TIME","body":  "TIME()", "description":  "TIME returns a string, in HH:MM format, representing the system time on the TM1 server." },
    "TIMST": { "prefix":  "TIMST","body":  "TIMST( ${1:nSerialDate}, ${2:sFormat}, ${3:bExtendedYears} )", "description":  "TIMST returns a formatted date/time string." },
    "TIMVL": { "prefix":  "TIMVL","body":  "TIMVL( ${1:nSerialDate}, ${2:sExtractType}, ${3:bExtendedYears} )", "description":  "TIMVL returns the numeric value of a component (year, month, etc.) of a date/time value." },
    "TODAY": { "prefix":  "TODAY","body":  "TODAY( ${1:[bReturnFourDigitYear]} )", "description":  "TODAY returns the current date in yy-mm-dd format." },
    "YEAR": { "prefix":  "YEAR","body":  "YEAR( ${1:sFormattedDate} )", "description":  "YEAR returns a numeric value for the year in a given date string." },
    "DIMIX": { "prefix":  "DIMIX","body":  "DIMIX( ${1:sDimName}, ${2:sElemID} )", "description":  "DIMIX returns the index number of an element within a dimension." },
    "DIMNM": { "prefix":  "DIMNM","body":  "DIMNM( ${1:sDimName}, ${2:nIndex} )", "description":  "DIMNM returns the element of a dimension that corresponds to the index argument." },
    "DIMSIZ": { "prefix":  "DIMSIZ","body":  "DIMSIZ( ${1:sDimName} )", "description":  "DIMSIZ returns the number of elements within a specified dimension." },
    "DNEXT": { "prefix":  "DNEXT","body":  "DNEXT( ${1:sDimName}, ${2:sElemID} )", "description":  "DNEXT returns the element name that follows the element specified as an argument to the function." },
    "DNLEV": { "prefix":  "DNLEV","body":  "DNLEV( ${1:sDimName} )", "description":  "DNLEV returns the number levels in a dimension." },
    "DTYPE": { "prefix":  "DTYPE","body":  "DTYPE( ${1:sDimName}, ${2:sElemID} )", "description":  "DTYPE returns information about the element type of a specified element. DTYPE returns N if the element is a numeric element, S if the element is a string element, and C if the element is a consolidated element." },
    "TABDIM": { "prefix":  "TABDIM","body":  "TABDIM( ${1:sCubeName}, ${2:nIndex} )", "description":  "TABDIM returns the dimension name that corresponds to the index argument." },
    "ELCOMP": { "prefix":  "ELCOMP","body":  "ELCOMP( ${1:sDimName}, ${2:sParentElemID}, ${3:nPosition} )", "description":  "ELCOMP returns the name of a child of a consolidated element in a specified dimension." },
    "ELCOMPN": { "prefix":  "ELCOMPN","body":  "ELCOMPN( ${1:sDimName}, ${2:sParentElemID} )", "description":  "ELCOMPN returns the number of components in a specified element. If the element argument is not a consolidated element, the function returns 0." },
    "ElementComponent": { "prefix":  "ElementComponent","body":  "ElementComponent( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:nPosition} )", "description":  "ElementComponent returns the name of a child of a consolidated element in a specified dimension. If the element argument is not a consolidated element, the function returns 0." },
    "ElementComponentCount": { "prefix":  "ElementComponentCount","body":  "ElementComponentCount( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID} )", "description":  "ElementComponentCount returns the number of components in a specified element. If the element argument is not a consolidated element, the function returns 0." },
    "ElementCount": { "prefix":  "ElementCount","body":  "ElementCount( ${1:sDimName}, ${2:sHierName} )", "description":  "ElementCount returns the number of elements within a specified dimension." },
    "ElementFirst": { "prefix":  "ElementFirst","body":  "ElementFirst( ${1:sDimName}, ${2:sHierName} )", "description":  "ElementFirst returns the first element of a specified dimension." },
    "ElementIndex": { "prefix":  "ElementIndex","body":  "ElementIndex( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementIndex returns the index number of an element within a dimension." },
    "ElementIsAncestor": { "prefix":  "ElementIsAncestor","body":  "ElementIsAncestor( ${1:sDimName}, ${2:sHierName}, ${3:sAncestorElemID}, ${4:sDescendantElemID} )", "description":  "ElementIsAncestor determines whether element1 is an ancestor of element2 in the specified dimension. The function returns 1 if element1 is an ancestor of element2, otherwise the function returns 0." },
    "ElementIsComponent": { "prefix":  "ElementIsComponent","body":  "ElementIsComponent( ${1:sDimName}, ${2:sHierName}, ${3:sChildElemID}, ${4:sParentElemID} )", "description":  "ElementIsComponent determines whether element1 is a child of element2 in the specified dimension. The function returns 1 if element1 is a child of element2, otherwise the function returns 0." },
    "ElementIsParent": { "prefix":  "ElementIsParent","body":  "ElementIsParent( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "ElementIsParent determines whether element1 is a parent of element2 in the specified dimension. The function returns 1 if element1 is a parent of element2, otherwise the function returns 0." },
    "ElementLevel": { "prefix":  "ElementLevel","body":  "ElementLevel( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementLevel returns the level of an element within a dimension." },
    "ElementName": { "prefix":  "ElementName","body":  "ElementName( ${1:sDimName}, ${2:sHierName}, ${3:nIndex} )", "description":  "ElementName returns the element of a dimension that corresponds to the index argument." },
    "ElementNext": { "prefix":  "ElementNext","body":  "ElementNext( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementNext returns the element name that follows the element specified as an argument to the function." },
    "ElementParent": { "prefix":  "ElementParent","body":  "ElementParent( ${1:sDimName}, ${2:sHierName}, ${3:sElemID}, ${4:nIndex} )", "description":  "ElementParent returns the parent of an element in a specified dimension." },
    "ElementParentCount": { "prefix":  "ElementParentCount","body":  "ElementParentCount( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementParentCount returns the number of parents of an element in a specified dimension." },
    "ElementType": { "prefix":  "ElementType","body":  "ElementType( ${1:sDimName}, ${2:sHierName}, ${3:sElemID} )", "description":  "ElementType returns information about the element type of a specified element. ElementType returns N if the element is a numeric element, S if the element is a string element, and C if the element is a consolidated element." },
    "ElementWeight": { "prefix":  "ElementWeight","body":  "ElementWeight( ${1:sDimName}, ${2:sHierName}, ${3:sParentElemID}, ${4:sChildElemID} )", "description":  "ElementWeight returns the weight of a child in a consolidated element." },
    "ELISANC": { "prefix":  "ELISANC","body":  "ELISANC( ${1:sDimName}, ${2:sAncestorElemID}, ${3:sDescendantElemID} )", "description":  "ELISANC determines whether element1 is an ancestor of element2 in the specified dimension. The function returns 1 if element1 is an ancestor of element2, otherwise the function returns 0." },
    "ELISCOMP": { "prefix":  "ELISCOMP","body":  "ELISCOMP( ${1:sDimName}, ${2:sChildElemID}, ${3:sParentElemID} )", "description":  "ELISCOMP determines whether element1 is a child of element2 in the specified dimension. The function returns 1 if element1 is a child of element2, otherwise the function returns 0." },
    "ELISPAR": { "prefix":  "ELISPAR","body":  "ELISPAR( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "ELISPAR determines whether element1 is a parent of element2 in the specified dimension. The function returns 1 if element1 is a parent of element2, otherwise the function returns 0." },
    "ELLEV": { "prefix":  "ELLEV","body":  "ELLEV( ${1:sDimName}, ${2:sElemID} )", "description":  "ELLEV returns the level of an element within a dimension." },
    "ELPAR": { "prefix":  "ELPAR","body":  "ELPAR( ${1:sDimName}, ${2:sElemID}, ${3:nIndex} )", "description":  "ELPAR returns the parent of an element in a specified dimension." },
    "ELPARN": { "prefix":  "ELPARN","body":  "ELPARN( ${1:sDimName}, ${2:sElemID} )", "description":  "ELPARN returns the number of parents of an element in a specified dimension." },
    "ELWEIGHT": { "prefix":  "ELWEIGHT","body":  "ELWEIGHT( ${1:sDimName}, ${2:sParentElemID}, ${3:sChildElemID} )", "description":  "ELWEIGHT returns the weight of a child in a consolidated element." },
    "LevelCount": { "prefix":  "LevelCount","body":  "LevelCount( ${1:sDimName}, ${2:sHierName} )", "description":  "LevelCount returns the number levels in a dimension." },
    "FV": { "prefix":  "FV","body":  "FV( ${1:nPayment}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "FV returns the value of an annuity at the time of the last payment. An annuity is a series of payments made at equal intervals of time. Payments are assumed to be made at the end of each period." },
    "PAYMT": { "prefix":  "PAYMT","body":  "PAYMT( ${1:nPrincipal}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "PAYMT returns the payment amount of an annuity based on a given initial value or principal, an interest rate, and a number of periods. An annuity is a series of payments made at equal intervals of time." },
    "PV": { "prefix":  "PV","body":  "PV( ${1:nPayment}, ${2:nInterest}, ${3:nPeriodCount} )", "description":  "PV returns the initial or principal value of an annuity." },
    "Hierarchy": { "prefix":  "Hierarchy","body":  "Hierarchy( ${1:sDimName} )", "description":  "If there is only one hierarchy included in the supplied dimension, Hierarchy returns the name of the hierarchy. Otherwise, it returns an empty string. Hierarchy is valid in TM1 rules only." },
    "HierarchyCount": { "prefix":  "HierarchyCount","body":  "HierarchyCount( ${1:sDimName} )", "description":  "HierarchyCount returns the number of hierarchies in the supplied dimension. HierarchyCount is valid in TM1 rules only." },
    "HierarchyIndex": { "prefix":  "HierarchyIndex","body":  "HierarchyIndex( ${1:sDimName}, ${2:sHierName} )", "description":  "HierarchyIndex returns a 1-based index if the hierarchy is in the supplied dimension, 0 otherwise. HierarchyIndex is valid in TM1 rules only." },
    "HierarchyN": { "prefix":  "HierarchyN","body":  "HierarchyN( ${1:sDimName}, ${2:nHierIndex} )", "description":  "HierarchyN returns the name of the hierarchy at a specified position in the supplied dimension and an empty string if the index is out of scope. HierarchyN is valid in TM1 rules only." },
    "IF": { "prefix":  "IF","body":  "IF( ${1:Expression}, ${2:TrueValue}, ${3:FalseValue} )", "description":  "IF returns one value if a logical expression you specify is TRUE and another value if it is FALSE." },
    "ABS": { "prefix":  "ABS","body":  "ABS( ${1:nNumber} )", "description":  "ABS returns the absolute value of a number." },
    "ACOS": { "prefix":  "ACOS","body":  "ACOS( ${1:nNumber} )", "description":  "ACOS returns the angle, in radians, whose cosine is x." },
    "ASIN": { "prefix":  "ASIN","body":  "ASIN( ${1:nNumber} )", "description":  "ASIN returns the angle, in radians, whose sine is x." },
    "ATAN": { "prefix":  "ATAN","body":  "ATAN( ${1:nNumber} )", "description":  "ATAN returns the angle, in radians, whose tangent is x. The result is between -pi/2 and +pi/2." },
    "COS": { "prefix":  "COS","body":  "COS( ${1:nNumber} )", "description":  "COS returns the cosine of an angle expressed in radians." },
    "EXP": { "prefix":  "EXP","body":  "EXP( ${1:nNumber} )", "description":  "EXP returns the natural anti-log of a number." },
    "INT": { "prefix":  "INT","body":  "INT( ${1:nNumber} )", "description":  "INT returns the largest integer that is less than or equal to a specified value." },
    "ISUND": { "prefix":  "ISUND","body":  "ISUND( ${1:nNumber} )", "description":  "ISUND returns 1 if a specified value is undefined; otherwise it returns 0." },
    "LN": { "prefix":  "LN","body":  "LN( ${1:nNumber} )", "description":  "LN returns the natural logarithm (base e) of a number." },
    "LOG": { "prefix":  "LOG","body":  "LOG( ${1:nNumber} )", "description":  "LOG returns the base 10 logarithm of a positive number." },
    "MAX": { "prefix":  "MAX","body":  "MAX( ${1:nNumber1}, ${2:nNumber2} )", "description":  "MAX returns the largest number in a pair of values." },
    "MIN": { "prefix":  "MIN","body":  "MIN( ${1:nNumber1}, ${2:nNumber2} )", "description":  "MIN returns the smallest number in a pair of values." },
    "MOD": { "prefix":  "MOD","body":  "MOD( ${1:nDividend}, ${2:nDivisor} )", "description":  "MOD returns the remainder of dividing a number by a divisor." },
    "RAND": { "prefix":  "RAND","body":  "RAND()", "description":  "RAND generates a random number that is uniformly distributed between 0 and 1. The random number generator is seeded when TM1 is loaded." },
    "ROUND": { "prefix":  "ROUND","body":  "ROUND( ${1:nNumber} )", "description":  "ROUND rounds a given number to the nearest integer. Rounding can be done in a variety of valid ways." },
    "ROUNDP": { "prefix":  "ROUNDP","body":  "ROUNDP( ${1:nNumber}, ${2:nDecimalPrecision} )", "description":  "ROUNDP rounds a given number at a specified decimal precision." },
    "SIGN": { "prefix":  "SIGN","body":  "SIGN( ${1:nWhatsMySign} )", "description":  "SIGN determines if a number is positive, negative, or zero. The function returns 1 if the number is positive, -1 if the number is negative, and 0 if the number is zero." },
    "SIN": { "prefix":  "SIN","body":  "SIN( ${1:nNumber} )", "description":  "SIN returns the sine of a given angle." },
    "SQRT": { "prefix":  "SQRT","body":  "SQRT( ${1:nNumber} )", "description":  "SQRT returns the square root of a given value." },
    "TAN": { "prefix":  "TAN","body":  "TAN( ${1:nNumber} )", "description":  "TAN returns the tangent of a given angle." },
    "CAPIT": { "prefix":  "CAPIT","body":  "CAPIT( ${1:sString} )", "description":  "CAPIT applies initial capitalization to every word in a string." },
    "CHAR": { "prefix":  "CHAR","body":  "CHAR( ${1:nAsciiCode} )", "description":  "CHAR returns the character identified by a given ASCII numeric code." },
    "CODE": { "prefix":  "CODE","body":  "CODE( ${1:sChar}, ${2:nCharLocation} )", "description":  "CODE returns the ASCII numeric code for a specified character within a string." },
    "DELET": { "prefix":  "DELET","body":  "DELET( ${1:sDeleteFrom}, ${2:nStart}, ${3:nDeleteCount} )", "description":  "DELET returns the result of deleting a specified number of characters from a specified starting point within a string." },
    "FILL": { "prefix":  "FILL","body":  "FILL( ${1:sFiller}, ${2:nLength} )", "description":  "FILL repeats a given string as necessary to return a string of a specified length." },
    "INSRT": { "prefix":  "INSRT","body":  "INSRT( ${1:sStringToInsert}, ${2:sBaseString}, ${3:nLocation} )", "description":  "INSRT inserts one string into another string at a specified insertion point." },
    "LONG": { "prefix":  "LONG","body":  "LONG( ${1:sString} )", "description":  "LONG returns the length of a string." },
    "LOWER": { "prefix":  "LOWER","body":  "LOWER( ${1:sString} )", "description":  "LOWER converts all upper case characters in a string to lower case." },
    "NUMBR": { "prefix":  "NUMBR","body":  "NUMBR( ${1:sString} )", "description":  "NUMBR converts a string to a number. The string passed to the NUMBR function must use. (period) as the decimal separator and , (comma) as the thousand separator. Any other decimal/thousand separators will cause incorrect results." },
    "SCAN": { "prefix":  "SCAN","body":  "SCAN( ${1:sFindString}, ${2:sWithinString} )", "description":  "SCAN returns a number indicating the starting location of the first occurrence of a specified substring within a string. If the substring does not occur in the given string, the function returns 0." },
    "STR": { "prefix":  "STR","body":  "STR( ${1:nNumber}, ${2:nTotalLength}, ${3:nDecimalPlaces} )", "description":  "STR converts a number to a string." },
    "SUBST": { "prefix":  "SUBST","body":  "SUBST( ${1:sString}, ${2:nBeginning}, ${3:nLength} )", "description":  "SUBST returns a substring of a given string." },
    "TRIM": { "prefix":  "TRIM","body":  "TRIM( ${1:sString} )", "description":  "TRIM returns the result of trimming any leading and trailing blanks from a string." },
    "UPPER": { "prefix":  "UPPER","body":  "UPPER( ${1:sString} )", "description":  "UPPER converts a text string to upper case." }
}